
SW_Layered_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  00000fd2  00001066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800124  00800124  0000112a  2**0
                  ALLOC
  3 .stab         000022d4  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016f1  00000000  00000000  00003400  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 32       	cpi	r26, 0x24	; 36
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 e2       	ldi	r26, 0x24	; 36
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 33       	cpi	r26, 0x33	; 51
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <main>
  8a:	0c 94 e7 07 	jmp	0xfce	; 0xfce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init_Task>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	af e5       	ldi	r26, 0x5F	; 95
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e5       	ldi	r30, 0x5F	; 95
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8c 93       	st	X, r24
  a8:	80 e6       	ldi	r24, 0x60	; 96
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Dio_Init>
  b0:	84 e6       	ldi	r24, 0x64	; 100
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 3c 04 	call	0x878	; 0x878 <Port_Init>
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <Button_Task>:
	//BUTTON_init();
}

/* Task called every 20 Mili-seconds to check the button state */
void Button_Task(void)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	BUTTON_refreshState();
  c6:	0e 94 93 00 	call	0x126	; 0x126 <BUTTON_refreshState>
}
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	08 95       	ret

000000d0 <Led_Task>:

/* Task called every 40 Mili-seconds to refresh the LED */
void Led_Task(void)
{
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	LED_refreshOutput();
  d8:	0e 94 ab 03 	call	0x756	; 0x756 <LED_refreshOutput>
}
  dc:	cf 91       	pop	r28
  de:	df 91       	pop	r29
  e0:	08 95       	ret

000000e2 <App_Task>:

/* Task called every 60 Mili-seconds to get the button status and toggle the led */
void App_Task(void)
{
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	static uint8 button_previous_state = BUTTON_RELEASED;
	static uint8 button_current_state  = BUTTON_RELEASED;
	
	button_current_state = BUTTON_getState(); //Read the button state
  ea:	0e 94 8a 00 	call	0x114	; 0x114 <BUTTON_getState>
  ee:	80 93 24 01 	sts	0x0124, r24
	
	/* Only Toggle the led in case the current state of the switch is pressed
	 * and the previous state is released */ 
	if((button_current_state == BUTTON_PRESSED) && (button_previous_state == BUTTON_RELEASED))
  f2:	80 91 24 01 	lds	r24, 0x0124
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	31 f4       	brne	.+12     	; 0x106 <App_Task+0x24>
  fa:	80 91 25 01 	lds	r24, 0x0125
  fe:	88 23       	and	r24, r24
 100:	11 f4       	brne	.+4      	; 0x106 <App_Task+0x24>
	{
		LED_toggle();
 102:	0e 94 bc 03 	call	0x778	; 0x778 <LED_toggle>
	}
	
	button_previous_state = button_current_state;
 106:	80 91 24 01 	lds	r24, 0x0124
 10a:	80 93 25 01 	sts	0x0125, r24
}
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

00000114 <BUTTON_getState>:
	BUTTON_configurations();
	Port_SetDirection(&g_Button_Config);
}*/
/*******************************************************************************************************************/
uint8 BUTTON_getState(void)
{
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	return g_button_state;
 11c:	80 91 28 01 	lds	r24, 0x0128
}
 120:	cf 91       	pop	r28
 122:	df 91       	pop	r29
 124:	08 95       	ret

00000126 <BUTTON_refreshState>:
/*******************************************************************************************************************/
void BUTTON_refreshState(void)
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	0f 92       	push	r0
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
	uint8 state = Dio_ReadChannel(DioConf_BUTTON_CHANNEL_ID_INDEX);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 af 01 	call	0x35e	; 0x35e <Dio_ReadChannel>
 136:	89 83       	std	Y+1, r24	; 0x01
	if(state == BUTTON_PRESSED)
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	41 f4       	brne	.+16     	; 0x14e <BUTTON_refreshState+0x28>
	{
		g_Pressed_Count++;
 13e:	80 91 26 01 	lds	r24, 0x0126
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 26 01 	sts	0x0126, r24
		g_Released_Count = 0;
 148:	10 92 27 01 	sts	0x0127, r1
 14c:	07 c0       	rjmp	.+14     	; 0x15c <BUTTON_refreshState+0x36>
	}
	else
	{
		g_Released_Count++;
 14e:	80 91 27 01 	lds	r24, 0x0127
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 27 01 	sts	0x0127, r24
		g_Pressed_Count = 0;
 158:	10 92 26 01 	sts	0x0126, r1
	}

	if(g_Pressed_Count == 3)
 15c:	80 91 26 01 	lds	r24, 0x0126
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	41 f4       	brne	.+16     	; 0x174 <BUTTON_refreshState+0x4e>
	{
		g_button_state = BUTTON_PRESSED;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 28 01 	sts	0x0128, r24
		g_Pressed_Count       = 0;
 16a:	10 92 26 01 	sts	0x0126, r1
		g_Released_Count      = 0;
 16e:	10 92 27 01 	sts	0x0127, r1
 172:	0a c0       	rjmp	.+20     	; 0x188 <BUTTON_refreshState+0x62>
	}
	else if(g_Released_Count == 3)
 174:	80 91 27 01 	lds	r24, 0x0127
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	31 f4       	brne	.+12     	; 0x188 <BUTTON_refreshState+0x62>
	{
		g_button_state = BUTTON_RELEASED;
 17c:	10 92 28 01 	sts	0x0128, r1
		g_Released_Count      = 0;
 180:	10 92 27 01 	sts	0x0127, r1
		g_Pressed_Count       = 0;
 184:	10 92 26 01 	sts	0x0126, r1
	}
}
 188:	0f 90       	pop	r0
 18a:	cf 91       	pop	r28
 18c:	df 91       	pop	r29
 18e:	08 95       	ret

00000190 <Det_ReportError>:

void Det_ReportError( uint16 ModuleId,
                      uint8 InstanceId,
                      uint8 ApiId,
					  uint8 ErrorId )
{
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	00 d0       	rcall	.+0      	; 0x196 <Det_ReportError+0x6>
 196:	00 d0       	rcall	.+0      	; 0x198 <Det_ReportError+0x8>
 198:	0f 92       	push	r0
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	9a 83       	std	Y+2, r25	; 0x02
 1a0:	89 83       	std	Y+1, r24	; 0x01
 1a2:	6b 83       	std	Y+3, r22	; 0x03
 1a4:	4c 83       	std	Y+4, r20	; 0x04
 1a6:	2d 83       	std	Y+5, r18	; 0x05
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <Det_ReportError+0x18>

000001aa <Dio_Init>:
* Parameters (out): None
* Return value: None
* Description: Function to Initialize the Dio module.
************************************************************************************/
void Dio_Init(const Dio_ConfigType * ConfigPtr)
{
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <Dio_Init+0x6>
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	89 83       	std	Y+1, r24	; 0x01
#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* check if the input configuration pointer is not a NULL_PTR */
	if (NULL_PTR == ConfigPtr)
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	41 f4       	brne	.+16     	; 0x1d0 <Dio_Init+0x26>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_INIT_SID,
 1c0:	88 e7       	ldi	r24, 0x78	; 120
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	40 e1       	ldi	r20, 0x10	; 16
 1c8:	20 e1       	ldi	r18, 0x10	; 16
 1ca:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <Dio_Init+0x38>
	{
		/*
		 * Set the module state to initialized and point to the PB configuration structure using a global pointer.
		 * This global pointer is global to be used by other functions to read the PB configuration structures
		 */
		Dio_Status       = DIO_INITIALIZED;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 2b 01 	sts	0x012B, r24
		Dio_PortChannels = ConfigPtr->Channels; /* address of the first Channels structure --> Channels[0] */
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	90 93 2a 01 	sts	0x012A, r25
 1de:	80 93 29 01 	sts	0x0129, r24
	}
}
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	08 95       	ret

000001ec <Dio_WriteChannel>:
* Parameters (out): None
* Return value: None
* Description: Function to set a level of a channel.
************************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level)
{
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	27 97       	sbiw	r28, 0x07	; 7
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	8c 83       	std	Y+4, r24	; 0x04
 202:	6d 83       	std	Y+5, r22	; 0x05
	Dio_PortLevelType * Port_Ptr = NULL_PTR;
 204:	1b 82       	std	Y+3, r1	; 0x03
 206:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
 208:	19 82       	std	Y+1, r1	; 0x01

#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (DIO_NOT_INITIALIZED == Dio_Status)
 20a:	80 91 2b 01 	lds	r24, 0x012B
 20e:	88 23       	and	r24, r24
 210:	49 f4       	brne	.+18     	; 0x224 <Dio_WriteChannel+0x38>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 212:	88 e7       	ldi	r24, 0x78	; 120
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	20 ef       	ldi	r18, 0xF0	; 240
 21c:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				DIO_WRITE_CHANNEL_SID, DIO_E_UNINIT);
		error = TRUE;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* No Action Required */
	}
	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 224:	8c 81       	ldd	r24, Y+4	; 0x04
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	48 f0       	brcs	.+18     	; 0x23c <Dio_WriteChannel+0x50>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 22a:	88 e7       	ldi	r24, 0x78	; 120
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	2a e0       	ldi	r18, 0x0A	; 10
 234:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				DIO_WRITE_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	89 83       	std	Y+1, r24	; 0x01
		/* No Action Required */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	88 23       	and	r24, r24
 240:	09 f0       	breq	.+2      	; 0x244 <Dio_WriteChannel+0x58>
 242:	84 c0       	rjmp	.+264    	; 0x34c <Dio_WriteChannel+0x160>
	{
		/* Point to the correct PORT register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 244:	20 91 29 01 	lds	r18, 0x0129
 248:	30 91 2a 01 	lds	r19, 0x012A
 24c:	8c 81       	ldd	r24, Y+4	; 0x04
 24e:	88 2f       	mov	r24, r24
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	f9 01       	movw	r30, r18
 258:	e8 0f       	add	r30, r24
 25a:	f9 1f       	adc	r31, r25
 25c:	80 81       	ld	r24, Z
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	3f 83       	std	Y+7, r19	; 0x07
 264:	2e 83       	std	Y+6, r18	; 0x06
 266:	8e 81       	ldd	r24, Y+6	; 0x06
 268:	9f 81       	ldd	r25, Y+7	; 0x07
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	91 05       	cpc	r25, r1
 26e:	d1 f0       	breq	.+52     	; 0x2a4 <Dio_WriteChannel+0xb8>
 270:	2e 81       	ldd	r18, Y+6	; 0x06
 272:	3f 81       	ldd	r19, Y+7	; 0x07
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	31 05       	cpc	r19, r1
 278:	2c f4       	brge	.+10     	; 0x284 <Dio_WriteChannel+0x98>
 27a:	8e 81       	ldd	r24, Y+6	; 0x06
 27c:	9f 81       	ldd	r25, Y+7	; 0x07
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	61 f0       	breq	.+24     	; 0x29a <Dio_WriteChannel+0xae>
 282:	1e c0       	rjmp	.+60     	; 0x2c0 <Dio_WriteChannel+0xd4>
 284:	2e 81       	ldd	r18, Y+6	; 0x06
 286:	3f 81       	ldd	r19, Y+7	; 0x07
 288:	22 30       	cpi	r18, 0x02	; 2
 28a:	31 05       	cpc	r19, r1
 28c:	81 f0       	breq	.+32     	; 0x2ae <Dio_WriteChannel+0xc2>
 28e:	8e 81       	ldd	r24, Y+6	; 0x06
 290:	9f 81       	ldd	r25, Y+7	; 0x07
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	91 05       	cpc	r25, r1
 296:	81 f0       	breq	.+32     	; 0x2b8 <Dio_WriteChannel+0xcc>
 298:	13 c0       	rjmp	.+38     	; 0x2c0 <Dio_WriteChannel+0xd4>
		{
			case 0:	Port_Ptr = &PORTA_REG;
 29a:	8b e3       	ldi	r24, 0x3B	; 59
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	9b 83       	std	Y+3, r25	; 0x03
 2a0:	8a 83       	std	Y+2, r24	; 0x02
 2a2:	0e c0       	rjmp	.+28     	; 0x2c0 <Dio_WriteChannel+0xd4>
		        break;
			case 1:	Port_Ptr = &PORTB_REG;
 2a4:	88 e3       	ldi	r24, 0x38	; 56
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	9b 83       	std	Y+3, r25	; 0x03
 2aa:	8a 83       	std	Y+2, r24	; 0x02
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <Dio_WriteChannel+0xd4>
		        break;
			case 2:	Port_Ptr = &PORTC_REG;
 2ae:	85 e3       	ldi	r24, 0x35	; 53
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	9b 83       	std	Y+3, r25	; 0x03
 2b4:	8a 83       	std	Y+2, r24	; 0x02
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <Dio_WriteChannel+0xd4>
		        break;
			case 3:	Port_Ptr = &PORTD_REG;
 2b8:	82 e3       	ldi	r24, 0x32	; 50
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	9b 83       	std	Y+3, r25	; 0x03
 2be:	8a 83       	std	Y+2, r24	; 0x02
		        break;
		}
		if(Level == STD_HIGH)
 2c0:	8d 81       	ldd	r24, Y+5	; 0x05
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	01 f5       	brne	.+64     	; 0x306 <Dio_WriteChannel+0x11a>
		{
			/* Write Logic High */
			SET_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 2c6:	ea 81       	ldd	r30, Y+2	; 0x02
 2c8:	fb 81       	ldd	r31, Y+3	; 0x03
 2ca:	80 81       	ld	r24, Z
 2cc:	48 2f       	mov	r20, r24
 2ce:	20 91 29 01 	lds	r18, 0x0129
 2d2:	30 91 2a 01 	lds	r19, 0x012A
 2d6:	8c 81       	ldd	r24, Y+4	; 0x04
 2d8:	88 2f       	mov	r24, r24
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	f9 01       	movw	r30, r18
 2e2:	e8 0f       	add	r30, r24
 2e4:	f9 1f       	adc	r31, r25
 2e6:	81 81       	ldd	r24, Z+1	; 0x01
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 2e       	mov	r0, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <Dio_WriteChannel+0x10c>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <Dio_WriteChannel+0x108>
 2fc:	84 2b       	or	r24, r20
 2fe:	ea 81       	ldd	r30, Y+2	; 0x02
 300:	fb 81       	ldd	r31, Y+3	; 0x03
 302:	80 83       	st	Z, r24
 304:	23 c0       	rjmp	.+70     	; 0x34c <Dio_WriteChannel+0x160>
		}
		else if(Level == STD_LOW)
 306:	8d 81       	ldd	r24, Y+5	; 0x05
 308:	88 23       	and	r24, r24
 30a:	01 f5       	brne	.+64     	; 0x34c <Dio_WriteChannel+0x160>
		{
			/* Write Logic Low */
			CLEAR_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 30c:	ea 81       	ldd	r30, Y+2	; 0x02
 30e:	fb 81       	ldd	r31, Y+3	; 0x03
 310:	80 81       	ld	r24, Z
 312:	48 2f       	mov	r20, r24
 314:	20 91 29 01 	lds	r18, 0x0129
 318:	30 91 2a 01 	lds	r19, 0x012A
 31c:	8c 81       	ldd	r24, Y+4	; 0x04
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	f9 01       	movw	r30, r18
 328:	e8 0f       	add	r30, r24
 32a:	f9 1f       	adc	r31, r25
 32c:	81 81       	ldd	r24, Z+1	; 0x01
 32e:	28 2f       	mov	r18, r24
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 2e       	mov	r0, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <Dio_WriteChannel+0x152>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <Dio_WriteChannel+0x14e>
 342:	80 95       	com	r24
 344:	84 23       	and	r24, r20
 346:	ea 81       	ldd	r30, Y+2	; 0x02
 348:	fb 81       	ldd	r31, Y+3	; 0x03
 34a:	80 83       	st	Z, r24
	else
	{
		/* No Action Required */
	}

}
 34c:	27 96       	adiw	r28, 0x07	; 7
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	cf 91       	pop	r28
 35a:	df 91       	pop	r29
 35c:	08 95       	ret

0000035e <Dio_ReadChannel>:
* Parameters (out): None
* Return value: Dio_LevelType
* Description: Function to return the value of the specified DIO channel.
************************************************************************************/
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	28 97       	sbiw	r28, 0x08	; 8
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	8d 83       	std	Y+5, r24	; 0x05
	Dio_PortLevelType * PIN_Ptr = NULL_PTR;
 374:	1c 82       	std	Y+4, r1	; 0x04
 376:	1b 82       	std	Y+3, r1	; 0x03
	Dio_LevelType output = STD_LOW;
 378:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
 37a:	19 82       	std	Y+1, r1	; 0x01

#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (DIO_NOT_INITIALIZED == Dio_Status)
 37c:	80 91 2b 01 	lds	r24, 0x012B
 380:	88 23       	and	r24, r24
 382:	49 f4       	brne	.+18     	; 0x396 <Dio_ReadChannel+0x38>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 384:	88 e7       	ldi	r24, 0x78	; 120
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	20 ef       	ldi	r18, 0xF0	; 240
 38e:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_UNINIT);
		error = TRUE;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* No Action Required */
	}
	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 396:	8d 81       	ldd	r24, Y+5	; 0x05
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	48 f0       	brcs	.+18     	; 0x3ae <Dio_ReadChannel+0x50>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 39c:	88 e7       	ldi	r24, 0x78	; 120
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	2a e0       	ldi	r18, 0x0A	; 10
 3a6:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	89 83       	std	Y+1, r24	; 0x01
		/* No Action Required */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	88 23       	and	r24, r24
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <Dio_ReadChannel+0x58>
 3b4:	65 c0       	rjmp	.+202    	; 0x480 <__stack+0x21>
	{
		/* Point to the correct PIN register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 3b6:	20 91 29 01 	lds	r18, 0x0129
 3ba:	30 91 2a 01 	lds	r19, 0x012A
 3be:	8d 81       	ldd	r24, Y+5	; 0x05
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	f9 01       	movw	r30, r18
 3ca:	e8 0f       	add	r30, r24
 3cc:	f9 1f       	adc	r31, r25
 3ce:	80 81       	ld	r24, Z
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	3f 83       	std	Y+7, r19	; 0x07
 3d6:	2e 83       	std	Y+6, r18	; 0x06
 3d8:	8e 81       	ldd	r24, Y+6	; 0x06
 3da:	9f 81       	ldd	r25, Y+7	; 0x07
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	91 05       	cpc	r25, r1
 3e0:	d1 f0       	breq	.+52     	; 0x416 <Dio_ReadChannel+0xb8>
 3e2:	2e 81       	ldd	r18, Y+6	; 0x06
 3e4:	3f 81       	ldd	r19, Y+7	; 0x07
 3e6:	22 30       	cpi	r18, 0x02	; 2
 3e8:	31 05       	cpc	r19, r1
 3ea:	2c f4       	brge	.+10     	; 0x3f6 <Dio_ReadChannel+0x98>
 3ec:	8e 81       	ldd	r24, Y+6	; 0x06
 3ee:	9f 81       	ldd	r25, Y+7	; 0x07
 3f0:	00 97       	sbiw	r24, 0x00	; 0
 3f2:	61 f0       	breq	.+24     	; 0x40c <Dio_ReadChannel+0xae>
 3f4:	1e c0       	rjmp	.+60     	; 0x432 <Dio_ReadChannel+0xd4>
 3f6:	2e 81       	ldd	r18, Y+6	; 0x06
 3f8:	3f 81       	ldd	r19, Y+7	; 0x07
 3fa:	22 30       	cpi	r18, 0x02	; 2
 3fc:	31 05       	cpc	r19, r1
 3fe:	81 f0       	breq	.+32     	; 0x420 <Dio_ReadChannel+0xc2>
 400:	8e 81       	ldd	r24, Y+6	; 0x06
 402:	9f 81       	ldd	r25, Y+7	; 0x07
 404:	83 30       	cpi	r24, 0x03	; 3
 406:	91 05       	cpc	r25, r1
 408:	81 f0       	breq	.+32     	; 0x42a <Dio_ReadChannel+0xcc>
 40a:	13 c0       	rjmp	.+38     	; 0x432 <Dio_ReadChannel+0xd4>
		{
		case 0:	PIN_Ptr = &PINA_REG;
 40c:	89 e3       	ldi	r24, 0x39	; 57
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	9c 83       	std	Y+4, r25	; 0x04
 412:	8b 83       	std	Y+3, r24	; 0x03
 414:	0e c0       	rjmp	.+28     	; 0x432 <Dio_ReadChannel+0xd4>
		break;
		case 1:	PIN_Ptr = &PINB_REG;
 416:	86 e3       	ldi	r24, 0x36	; 54
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	9c 83       	std	Y+4, r25	; 0x04
 41c:	8b 83       	std	Y+3, r24	; 0x03
 41e:	09 c0       	rjmp	.+18     	; 0x432 <Dio_ReadChannel+0xd4>
		break;
		case 2:	PIN_Ptr = &PINC_REG;
 420:	83 e3       	ldi	r24, 0x33	; 51
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	9c 83       	std	Y+4, r25	; 0x04
 426:	8b 83       	std	Y+3, r24	; 0x03
 428:	04 c0       	rjmp	.+8      	; 0x432 <Dio_ReadChannel+0xd4>
		break;
		case 3:	PIN_Ptr = &PIND_REG;
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	9c 83       	std	Y+4, r25	; 0x04
 430:	8b 83       	std	Y+3, r24	; 0x03
		break;
		}
		/* Read the required channel */
		if(BIT_IS_SET(*PIN_Ptr,Dio_PortChannels[ChannelId].Ch_Num))
 432:	eb 81       	ldd	r30, Y+3	; 0x03
 434:	fc 81       	ldd	r31, Y+4	; 0x04
 436:	80 81       	ld	r24, Z
 438:	48 2f       	mov	r20, r24
 43a:	50 e0       	ldi	r21, 0x00	; 0
 43c:	20 91 29 01 	lds	r18, 0x0129
 440:	30 91 2a 01 	lds	r19, 0x012A
 444:	8d 81       	ldd	r24, Y+5	; 0x05
 446:	88 2f       	mov	r24, r24
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	f9 01       	movw	r30, r18
 450:	e8 0f       	add	r30, r24
 452:	f9 1f       	adc	r31, r25
 454:	81 81       	ldd	r24, Z+1	; 0x01
 456:	88 2f       	mov	r24, r24
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	9a 01       	movw	r18, r20
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__stack+0x3>
 45e:	35 95       	asr	r19
 460:	27 95       	ror	r18
 462:	8a 95       	dec	r24
 464:	e2 f7       	brpl	.-8      	; 0x45e <Dio_ReadChannel+0x100>
 466:	c9 01       	movw	r24, r18
 468:	81 70       	andi	r24, 0x01	; 1
 46a:	90 70       	andi	r25, 0x00	; 0
 46c:	88 23       	and	r24, r24
 46e:	19 f0       	breq	.+6      	; 0x476 <__stack+0x17>
		{
			output = STD_HIGH;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	8a 83       	std	Y+2, r24	; 0x02
 474:	01 c0       	rjmp	.+2      	; 0x478 <__stack+0x19>
		}
		else
		{
			output = STD_LOW;
 476:	1a 82       	std	Y+2, r1	; 0x02
		}
		return output;
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	88 87       	std	Y+8, r24	; 0x08
	}
	else
	{
		/* No Action Required */
	}
}
 47c:	88 85       	ldd	r24, Y+8	; 0x08
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__stack+0x21>
 480:	28 96       	adiw	r28, 0x08	; 8
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	de bf       	out	0x3e, r29	; 62
 488:	0f be       	out	0x3f, r0	; 63
 48a:	cd bf       	out	0x3d, r28	; 61
 48c:	cf 91       	pop	r28
 48e:	df 91       	pop	r29
 490:	08 95       	ret

00000492 <Dio_FlipChannel>:
* Return value: Dio_LevelType
* Description: Function to flip the level of a channel and return the level of the channel after flip.
************************************************************************************/
#if (DIO_FLIP_CHANNEL_API == STD_ON)
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 492:	df 93       	push	r29
 494:	cf 93       	push	r28
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	2a 97       	sbiw	r28, 0x0a	; 10
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	8f 83       	std	Y+7, r24	; 0x07
	Dio_PortLevelType * Port_Ptr = NULL_PTR;
 4a8:	1e 82       	std	Y+6, r1	; 0x06
 4aa:	1d 82       	std	Y+5, r1	; 0x05
	Dio_PortLevelType * PIN_Ptr = NULL_PTR;
 4ac:	1c 82       	std	Y+4, r1	; 0x04
 4ae:	1b 82       	std	Y+3, r1	; 0x03
	Dio_LevelType output = STD_LOW;
 4b0:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
 4b2:	19 82       	std	Y+1, r1	; 0x01

#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (DIO_NOT_INITIALIZED == Dio_Status)
 4b4:	80 91 2b 01 	lds	r24, 0x012B
 4b8:	88 23       	and	r24, r24
 4ba:	49 f4       	brne	.+18     	; 0x4ce <Dio_FlipChannel+0x3c>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 4bc:	88 e7       	ldi	r24, 0x78	; 120
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	41 e1       	ldi	r20, 0x11	; 17
 4c4:	20 ef       	ldi	r18, 0xF0	; 240
 4c6:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				DIO_FLIP_CHANNEL_SID, DIO_E_UNINIT);
		error = TRUE;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* No Action Required */
	}
	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 4ce:	8f 81       	ldd	r24, Y+7	; 0x07
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	48 f0       	brcs	.+18     	; 0x4e6 <Dio_FlipChannel+0x54>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 4d4:	88 e7       	ldi	r24, 0x78	; 120
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	41 e1       	ldi	r20, 0x11	; 17
 4dc:	2a e0       	ldi	r18, 0x0A	; 10
 4de:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				DIO_FLIP_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	89 83       	std	Y+1, r24	; 0x01
		/* No Action Required */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	88 23       	and	r24, r24
 4ea:	09 f0       	breq	.+2      	; 0x4ee <Dio_FlipChannel+0x5c>
 4ec:	b4 c0       	rjmp	.+360    	; 0x656 <Dio_FlipChannel+0x1c4>
	{
		/* Point to the correct PIN & PORT register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 4ee:	20 91 29 01 	lds	r18, 0x0129
 4f2:	30 91 2a 01 	lds	r19, 0x012A
 4f6:	8f 81       	ldd	r24, Y+7	; 0x07
 4f8:	88 2f       	mov	r24, r24
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	f9 01       	movw	r30, r18
 502:	e8 0f       	add	r30, r24
 504:	f9 1f       	adc	r31, r25
 506:	80 81       	ld	r24, Z
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	39 87       	std	Y+9, r19	; 0x09
 50e:	28 87       	std	Y+8, r18	; 0x08
 510:	88 85       	ldd	r24, Y+8	; 0x08
 512:	99 85       	ldd	r25, Y+9	; 0x09
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	91 05       	cpc	r25, r1
 518:	f1 f0       	breq	.+60     	; 0x556 <Dio_FlipChannel+0xc4>
 51a:	28 85       	ldd	r18, Y+8	; 0x08
 51c:	39 85       	ldd	r19, Y+9	; 0x09
 51e:	22 30       	cpi	r18, 0x02	; 2
 520:	31 05       	cpc	r19, r1
 522:	2c f4       	brge	.+10     	; 0x52e <Dio_FlipChannel+0x9c>
 524:	88 85       	ldd	r24, Y+8	; 0x08
 526:	99 85       	ldd	r25, Y+9	; 0x09
 528:	00 97       	sbiw	r24, 0x00	; 0
 52a:	61 f0       	breq	.+24     	; 0x544 <Dio_FlipChannel+0xb2>
 52c:	2e c0       	rjmp	.+92     	; 0x58a <Dio_FlipChannel+0xf8>
 52e:	28 85       	ldd	r18, Y+8	; 0x08
 530:	39 85       	ldd	r19, Y+9	; 0x09
 532:	22 30       	cpi	r18, 0x02	; 2
 534:	31 05       	cpc	r19, r1
 536:	c1 f0       	breq	.+48     	; 0x568 <Dio_FlipChannel+0xd6>
 538:	88 85       	ldd	r24, Y+8	; 0x08
 53a:	99 85       	ldd	r25, Y+9	; 0x09
 53c:	83 30       	cpi	r24, 0x03	; 3
 53e:	91 05       	cpc	r25, r1
 540:	e1 f0       	breq	.+56     	; 0x57a <Dio_FlipChannel+0xe8>
 542:	23 c0       	rjmp	.+70     	; 0x58a <Dio_FlipChannel+0xf8>
		{
		case 0:	Port_Ptr = &PORTA_REG;
 544:	8b e3       	ldi	r24, 0x3B	; 59
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	9e 83       	std	Y+6, r25	; 0x06
 54a:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PINA_REG;
 54c:	89 e3       	ldi	r24, 0x39	; 57
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	9c 83       	std	Y+4, r25	; 0x04
 552:	8b 83       	std	Y+3, r24	; 0x03
 554:	1a c0       	rjmp	.+52     	; 0x58a <Dio_FlipChannel+0xf8>
		break;
		case 1:	Port_Ptr = &PORTB_REG;
 556:	88 e3       	ldi	r24, 0x38	; 56
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	9e 83       	std	Y+6, r25	; 0x06
 55c:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PINB_REG;
 55e:	86 e3       	ldi	r24, 0x36	; 54
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	9c 83       	std	Y+4, r25	; 0x04
 564:	8b 83       	std	Y+3, r24	; 0x03
 566:	11 c0       	rjmp	.+34     	; 0x58a <Dio_FlipChannel+0xf8>
		break;
		case 2:	Port_Ptr = &PORTC_REG;
 568:	85 e3       	ldi	r24, 0x35	; 53
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	9e 83       	std	Y+6, r25	; 0x06
 56e:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PINC_REG;
 570:	83 e3       	ldi	r24, 0x33	; 51
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	9c 83       	std	Y+4, r25	; 0x04
 576:	8b 83       	std	Y+3, r24	; 0x03
 578:	08 c0       	rjmp	.+16     	; 0x58a <Dio_FlipChannel+0xf8>
		break;
		case 3:	Port_Ptr = &PORTD_REG;
 57a:	82 e3       	ldi	r24, 0x32	; 50
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	9e 83       	std	Y+6, r25	; 0x06
 580:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PIND_REG;
 582:	80 e3       	ldi	r24, 0x30	; 48
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	9c 83       	std	Y+4, r25	; 0x04
 588:	8b 83       	std	Y+3, r24	; 0x03
		break;
		}
		/* Read the required channel and write the required level */
		if(BIT_IS_SET(*PIN_Ptr,Dio_PortChannels[ChannelId].Ch_Num))
 58a:	eb 81       	ldd	r30, Y+3	; 0x03
 58c:	fc 81       	ldd	r31, Y+4	; 0x04
 58e:	80 81       	ld	r24, Z
 590:	48 2f       	mov	r20, r24
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	20 91 29 01 	lds	r18, 0x0129
 598:	30 91 2a 01 	lds	r19, 0x012A
 59c:	8f 81       	ldd	r24, Y+7	; 0x07
 59e:	88 2f       	mov	r24, r24
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	f9 01       	movw	r30, r18
 5a8:	e8 0f       	add	r30, r24
 5aa:	f9 1f       	adc	r31, r25
 5ac:	81 81       	ldd	r24, Z+1	; 0x01
 5ae:	88 2f       	mov	r24, r24
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	9a 01       	movw	r18, r20
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <Dio_FlipChannel+0x128>
 5b6:	35 95       	asr	r19
 5b8:	27 95       	ror	r18
 5ba:	8a 95       	dec	r24
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <Dio_FlipChannel+0x124>
 5be:	c9 01       	movw	r24, r18
 5c0:	81 70       	andi	r24, 0x01	; 1
 5c2:	90 70       	andi	r25, 0x00	; 0
 5c4:	88 23       	and	r24, r24
 5c6:	11 f1       	breq	.+68     	; 0x60c <Dio_FlipChannel+0x17a>
		{
			CLEAR_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 5c8:	ed 81       	ldd	r30, Y+5	; 0x05
 5ca:	fe 81       	ldd	r31, Y+6	; 0x06
 5cc:	80 81       	ld	r24, Z
 5ce:	48 2f       	mov	r20, r24
 5d0:	20 91 29 01 	lds	r18, 0x0129
 5d4:	30 91 2a 01 	lds	r19, 0x012A
 5d8:	8f 81       	ldd	r24, Y+7	; 0x07
 5da:	88 2f       	mov	r24, r24
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	f9 01       	movw	r30, r18
 5e4:	e8 0f       	add	r30, r24
 5e6:	f9 1f       	adc	r31, r25
 5e8:	81 81       	ldd	r24, Z+1	; 0x01
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 2e       	mov	r0, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <Dio_FlipChannel+0x168>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	0a 94       	dec	r0
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <Dio_FlipChannel+0x164>
 5fe:	80 95       	com	r24
 600:	84 23       	and	r24, r20
 602:	ed 81       	ldd	r30, Y+5	; 0x05
 604:	fe 81       	ldd	r31, Y+6	; 0x06
 606:	80 83       	st	Z, r24
			output = STD_LOW;
 608:	1a 82       	std	Y+2, r1	; 0x02
 60a:	21 c0       	rjmp	.+66     	; 0x64e <Dio_FlipChannel+0x1bc>
		}
		else
		{
			SET_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 60c:	ed 81       	ldd	r30, Y+5	; 0x05
 60e:	fe 81       	ldd	r31, Y+6	; 0x06
 610:	80 81       	ld	r24, Z
 612:	48 2f       	mov	r20, r24
 614:	20 91 29 01 	lds	r18, 0x0129
 618:	30 91 2a 01 	lds	r19, 0x012A
 61c:	8f 81       	ldd	r24, Y+7	; 0x07
 61e:	88 2f       	mov	r24, r24
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	f9 01       	movw	r30, r18
 628:	e8 0f       	add	r30, r24
 62a:	f9 1f       	adc	r31, r25
 62c:	81 81       	ldd	r24, Z+1	; 0x01
 62e:	28 2f       	mov	r18, r24
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 2e       	mov	r0, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <Dio_FlipChannel+0x1ac>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	0a 94       	dec	r0
 640:	e2 f7       	brpl	.-8      	; 0x63a <Dio_FlipChannel+0x1a8>
 642:	84 2b       	or	r24, r20
 644:	ed 81       	ldd	r30, Y+5	; 0x05
 646:	fe 81       	ldd	r31, Y+6	; 0x06
 648:	80 83       	st	Z, r24
			output = STD_HIGH;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	8a 83       	std	Y+2, r24	; 0x02
		}
		return output;
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	8a 87       	std	Y+10, r24	; 0x0a
	}
	else
	{
		/* No Action Required */
	}
}
 652:	8a 85       	ldd	r24, Y+10	; 0x0a
 654:	00 c0       	rjmp	.+0      	; 0x656 <Dio_FlipChannel+0x1c4>
 656:	2a 96       	adiw	r28, 0x0a	; 10
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	f8 94       	cli
 65c:	de bf       	out	0x3e, r29	; 62
 65e:	0f be       	out	0x3f, r0	; 63
 660:	cd bf       	out	0x3d, r28	; 61
 662:	cf 91       	pop	r28
 664:	df 91       	pop	r29
 666:	08 95       	ret

00000668 <Timer0_start>:
 * to be used in Call Back */
static volatile void (*g_Timer0_Call_Back_Ptr)(void) = NULL_PTR;

/*********************************************************************************************/ 
void Timer0_start(uint8 Tick_Time)
{
 668:	df 93       	push	r29
 66a:	cf 93       	push	r28
 66c:	0f 92       	push	r0
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	89 83       	std	Y+1, r24	; 0x01
	TCNT0  = 0; /* Timer0 initial value */
 674:	e2 e5       	ldi	r30, 0x52	; 82
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	10 82       	st	Z, r1
	OCR0   = Tick_Time; /* Set Compare Register Value */
 67a:	ec e5       	ldi	r30, 0x5C	; 92
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE0); /* Enable Compare Interrupt for Timer0 */
 682:	a9 e5       	ldi	r26, 0x59	; 89
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	e9 e5       	ldi	r30, 0x59	; 89
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	82 60       	ori	r24, 0x02	; 2
 68e:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 so COM00=0 & COM01=0  
	 * 4. start Timer0 by initiating clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0  = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
 690:	e3 e5       	ldi	r30, 0x53	; 83
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	8d e8       	ldi	r24, 0x8D	; 141
 696:	80 83       	st	Z, r24
}
 698:	0f 90       	pop	r0
 69a:	cf 91       	pop	r28
 69c:	df 91       	pop	r29
 69e:	08 95       	ret

000006a0 <Timer0_setCallBack>:
/*********************************************************************************************/
void Timer0_setCallBack(void(*Ptr2Func)(void))
{
 6a0:	df 93       	push	r29
 6a2:	cf 93       	push	r28
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <Timer0_setCallBack+0x6>
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	9a 83       	std	Y+2, r25	; 0x02
 6ac:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0_Call_Back_Ptr = Ptr2Func;
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	9a 81       	ldd	r25, Y+2	; 0x02
 6b2:	90 93 2d 01 	sts	0x012D, r25
 6b6:	80 93 2c 01 	sts	0x012C, r24
}
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	cf 91       	pop	r28
 6c0:	df 91       	pop	r29
 6c2:	08 95       	ret

000006c4 <__vector_19>:
/*********************************************************************************************/
/* Interrupt Service Routine for Timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
 6c4:	1f 92       	push	r1
 6c6:	0f 92       	push	r0
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	0f 92       	push	r0
 6cc:	11 24       	eor	r1, r1
 6ce:	2f 93       	push	r18
 6d0:	3f 93       	push	r19
 6d2:	4f 93       	push	r20
 6d4:	5f 93       	push	r21
 6d6:	6f 93       	push	r22
 6d8:	7f 93       	push	r23
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
 6de:	af 93       	push	r26
 6e0:	bf 93       	push	r27
 6e2:	ef 93       	push	r30
 6e4:	ff 93       	push	r31
 6e6:	df 93       	push	r29
 6e8:	cf 93       	push	r28
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
	/* Check if the Timer0_setCallBack is already called */
	if(g_Timer0_Call_Back_Ptr != NULL_PTR)
 6ee:	80 91 2c 01 	lds	r24, 0x012C
 6f2:	90 91 2d 01 	lds	r25, 0x012D
 6f6:	00 97       	sbiw	r24, 0x00	; 0
 6f8:	29 f0       	breq	.+10     	; 0x704 <__vector_19+0x40>
	{
		(*g_Timer0_Call_Back_Ptr)(); //call the function in the scheduler using call-back concept
 6fa:	e0 91 2c 01 	lds	r30, 0x012C
 6fe:	f0 91 2d 01 	lds	r31, 0x012D
 702:	09 95       	icall
	}
}
 704:	cf 91       	pop	r28
 706:	df 91       	pop	r29
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	bf 91       	pop	r27
 70e:	af 91       	pop	r26
 710:	9f 91       	pop	r25
 712:	8f 91       	pop	r24
 714:	7f 91       	pop	r23
 716:	6f 91       	pop	r22
 718:	5f 91       	pop	r21
 71a:	4f 91       	pop	r20
 71c:	3f 91       	pop	r19
 71e:	2f 91       	pop	r18
 720:	0f 90       	pop	r0
 722:	0f be       	out	0x3f, r0	; 63
 724:	0f 90       	pop	r0
 726:	1f 90       	pop	r1
 728:	18 95       	reti

0000072a <LED_setOn>:
	Port_SetDirection(&g_LED_Config); // set the direction of the LED
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_OFF); // LED OFF
}*/
/*********************************************************************************************/
void LED_setOn(void)
{
 72a:	df 93       	push	r29
 72c:	cf 93       	push	r28
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_ON); // LED ON
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	61 e0       	ldi	r22, 0x01	; 1
 736:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Dio_WriteChannel>
}
 73a:	cf 91       	pop	r28
 73c:	df 91       	pop	r29
 73e:	08 95       	ret

00000740 <LED_setOff>:
/*********************************************************************************************/
void LED_setOff(void)
{
 740:	df 93       	push	r29
 742:	cf 93       	push	r28
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_OFF); // LED OFF
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Dio_WriteChannel>
}
 750:	cf 91       	pop	r28
 752:	df 91       	pop	r29
 754:	08 95       	ret

00000756 <LED_refreshOutput>:
/*********************************************************************************************/
void LED_refreshOutput(void)
{
 756:	df 93       	push	r29
 758:	cf 93       	push	r28
 75a:	0f 92       	push	r0
 75c:	cd b7       	in	r28, 0x3d	; 61
 75e:	de b7       	in	r29, 0x3e	; 62
	Dio_LevelType state = Dio_ReadChannel(DioConf_LED_CHANNEL_ID_INDEX);
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	0e 94 af 01 	call	0x35e	; 0x35e <Dio_ReadChannel>
 766:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,state); // re-write the same value
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	69 81       	ldd	r22, Y+1	; 0x01
 76c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Dio_WriteChannel>
}
 770:	0f 90       	pop	r0
 772:	cf 91       	pop	r28
 774:	df 91       	pop	r29
 776:	08 95       	ret

00000778 <LED_toggle>:
/*********************************************************************************************/
void LED_toggle(void)
{
 778:	df 93       	push	r29
 77a:	cf 93       	push	r28
 77c:	0f 92       	push	r0
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
	Dio_LevelType state = Dio_FlipChannel(DioConf_LED_CHANNEL_ID_INDEX);
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	0e 94 49 02 	call	0x492	; 0x492 <Dio_FlipChannel>
 788:	89 83       	std	Y+1, r24	; 0x01
}
 78a:	0f 90       	pop	r0
 78c:	cf 91       	pop	r28
 78e:	df 91       	pop	r29
 790:	08 95       	ret

00000792 <Os_start>:
/* Global variable to indicate the the timer has a new tick */
static uint8 g_New_Time_Tick_Flag = 0;

/*********************************************************************************************/
void Os_start(void)
{
 792:	df 93       	push	r29
 794:	cf 93       	push	r28
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Set the Call Back function call to Scheduler_New_Timer_Tick
	 * this function will be called every Timer0 Compare Interrupt(20ms)
	 */
	Timer0_setCallBack(Os_newTimerTick);
 79a:	8b ed       	ldi	r24, 0xDB	; 219
 79c:	93 e0       	ldi	r25, 0x03	; 3
 79e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Timer0_setCallBack>

	/* Start Timer0 in Compare Mode to generate interrupt every 20ms */
	Timer0_start(OS_BASE_TIME);
 7a2:	84 e1       	ldi	r24, 0x14	; 20
 7a4:	0e 94 34 03 	call	0x668	; 0x668 <Timer0_start>

	/* Execute the Init Task */
	Init_Task();
 7a8:	0e 94 49 00 	call	0x92	; 0x92 <Init_Task>

	/* Start the Os Scheduler */
	Os_scheduler();
 7ac:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Os_scheduler>
}
 7b0:	cf 91       	pop	r28
 7b2:	df 91       	pop	r29
 7b4:	08 95       	ret

000007b6 <Os_newTimerTick>:
/*********************************************************************************************/
void Os_newTimerTick(void)
{
 7b6:	df 93       	push	r29
 7b8:	cf 93       	push	r28
 7ba:	cd b7       	in	r28, 0x3d	; 61
 7bc:	de b7       	in	r29, 0x3e	; 62
	/* increment the Os time by OS_BASE_TIME */
	g_Time_Tick_Count   += OS_BASE_TIME;
 7be:	80 91 2e 01 	lds	r24, 0x012E
 7c2:	8c 5e       	subi	r24, 0xEC	; 236
 7c4:	80 93 2e 01 	sts	0x012E, r24

	/* Set the flag to 1 to indicate that there is a new timer tick */
	g_New_Time_Tick_Flag = 1;
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	80 93 2f 01 	sts	0x012F, r24
}
 7ce:	cf 91       	pop	r28
 7d0:	df 91       	pop	r29
 7d2:	08 95       	ret

000007d4 <Os_scheduler>:
/*********************************************************************************************/
void Os_scheduler(void)
{
 7d4:	df 93       	push	r29
 7d6:	cf 93       	push	r28
 7d8:	00 d0       	rcall	.+0      	; 0x7da <Os_scheduler+0x6>
 7da:	cd b7       	in	r28, 0x3d	; 61
 7dc:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		/* Code is only executed in case there is a new timer tick */
		if(g_New_Time_Tick_Flag == 1)
 7de:	80 91 2f 01 	lds	r24, 0x012F
 7e2:	81 30       	cpi	r24, 0x01	; 1
 7e4:	e1 f7       	brne	.-8      	; 0x7de <Os_scheduler+0xa>
		{
			switch(g_Time_Tick_Count)
 7e6:	80 91 2e 01 	lds	r24, 0x012E
 7ea:	28 2f       	mov	r18, r24
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	3a 83       	std	Y+2, r19	; 0x02
 7f0:	29 83       	std	Y+1, r18	; 0x01
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
 7f4:	9a 81       	ldd	r25, Y+2	; 0x02
 7f6:	8c 33       	cpi	r24, 0x3C	; 60
 7f8:	91 05       	cpc	r25, r1
 7fa:	61 f1       	breq	.+88     	; 0x854 <Os_scheduler+0x80>
 7fc:	29 81       	ldd	r18, Y+1	; 0x01
 7fe:	3a 81       	ldd	r19, Y+2	; 0x02
 800:	2d 33       	cpi	r18, 0x3D	; 61
 802:	31 05       	cpc	r19, r1
 804:	5c f4       	brge	.+22     	; 0x81c <Os_scheduler+0x48>
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	9a 81       	ldd	r25, Y+2	; 0x02
 80a:	84 31       	cpi	r24, 0x14	; 20
 80c:	91 05       	cpc	r25, r1
 80e:	b1 f0       	breq	.+44     	; 0x83c <Os_scheduler+0x68>
 810:	29 81       	ldd	r18, Y+1	; 0x01
 812:	3a 81       	ldd	r19, Y+2	; 0x02
 814:	28 32       	cpi	r18, 0x28	; 40
 816:	31 05       	cpc	r19, r1
 818:	b1 f0       	breq	.+44     	; 0x846 <Os_scheduler+0x72>
 81a:	e1 cf       	rjmp	.-62     	; 0x7de <Os_scheduler+0xa>
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	9a 81       	ldd	r25, Y+2	; 0x02
 820:	84 36       	cpi	r24, 0x64	; 100
 822:	91 05       	cpc	r25, r1
 824:	59 f0       	breq	.+22     	; 0x83c <Os_scheduler+0x68>
 826:	29 81       	ldd	r18, Y+1	; 0x01
 828:	3a 81       	ldd	r19, Y+2	; 0x02
 82a:	28 37       	cpi	r18, 0x78	; 120
 82c:	31 05       	cpc	r19, r1
 82e:	c9 f0       	breq	.+50     	; 0x862 <Os_scheduler+0x8e>
 830:	89 81       	ldd	r24, Y+1	; 0x01
 832:	9a 81       	ldd	r25, Y+2	; 0x02
 834:	80 35       	cpi	r24, 0x50	; 80
 836:	91 05       	cpc	r25, r1
 838:	31 f0       	breq	.+12     	; 0x846 <Os_scheduler+0x72>
 83a:	d1 cf       	rjmp	.-94     	; 0x7de <Os_scheduler+0xa>
			{
				case 20:
				case 100:
					Button_Task();
 83c:	0e 94 5f 00 	call	0xbe	; 0xbe <Button_Task>
					g_New_Time_Tick_Flag = 0;
 840:	10 92 2f 01 	sts	0x012F, r1
 844:	cc cf       	rjmp	.-104    	; 0x7de <Os_scheduler+0xa>
					break;
				case 40:
				case 80:
					Button_Task();
 846:	0e 94 5f 00 	call	0xbe	; 0xbe <Button_Task>
					Led_Task();
 84a:	0e 94 68 00 	call	0xd0	; 0xd0 <Led_Task>
					g_New_Time_Tick_Flag = 0;
 84e:	10 92 2f 01 	sts	0x012F, r1
 852:	c5 cf       	rjmp	.-118    	; 0x7de <Os_scheduler+0xa>
					break;
				case 60:
					Button_Task();
 854:	0e 94 5f 00 	call	0xbe	; 0xbe <Button_Task>
					App_Task();
 858:	0e 94 71 00 	call	0xe2	; 0xe2 <App_Task>
					g_New_Time_Tick_Flag = 0;
 85c:	10 92 2f 01 	sts	0x012F, r1
 860:	be cf       	rjmp	.-132    	; 0x7de <Os_scheduler+0xa>
					break;
				case 120:
					Button_Task();
 862:	0e 94 5f 00 	call	0xbe	; 0xbe <Button_Task>
					App_Task();
 866:	0e 94 71 00 	call	0xe2	; 0xe2 <App_Task>
					Led_Task();
 86a:	0e 94 68 00 	call	0xd0	; 0xd0 <Led_Task>
					g_New_Time_Tick_Flag = 0;
 86e:	10 92 2f 01 	sts	0x012F, r1
					g_Time_Tick_Count = 0;
 872:	10 92 2e 01 	sts	0x012E, r1
 876:	b3 cf       	rjmp	.-154    	; 0x7de <Os_scheduler+0xa>

00000878 <Port_Init>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: None
 * Description: Function to Initialize the Port Driver module
 ************************************************************************************/
void Port_Init(const Port_ConfigType* ConfigPtr ){
 878:	df 93       	push	r29
 87a:	cf 93       	push	r28
 87c:	cd b7       	in	r28, 0x3d	; 61
 87e:	de b7       	in	r29, 0x3e	; 62
 880:	28 97       	sbiw	r28, 0x08	; 8
 882:	0f b6       	in	r0, 0x3f	; 63
 884:	f8 94       	cli
 886:	de bf       	out	0x3e, r29	; 62
 888:	0f be       	out	0x3f, r0	; 63
 88a:	cd bf       	out	0x3d, r28	; 61
 88c:	98 87       	std	Y+8, r25	; 0x08
 88e:	8f 83       	std	Y+7, r24	; 0x07
#if (PORT_DEV_ERROR_DETECT == STD_ON)
	/* check if the input configuration pointer is not a NULL_PTR */
	if (NULL_PTR == ConfigPtr)
 890:	8f 81       	ldd	r24, Y+7	; 0x07
 892:	98 85       	ldd	r25, Y+8	; 0x08
 894:	00 97       	sbiw	r24, 0x00	; 0
 896:	41 f4       	brne	.+16     	; 0x8a8 <Port_Init+0x30>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID,
 898:	8c e7       	ldi	r24, 0x7C	; 124
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	40 e0       	ldi	r20, 0x00	; 0
 8a0:	2c e0       	ldi	r18, 0x0C	; 12
 8a2:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
 8a6:	d0 c1       	rjmp	.+928    	; 0xc48 <Port_Init+0x3d0>
	}
	else
#endif
	{
		uint8 i,pin_num;
		Port_PinType* DDR_ptr=NULL_PTR;
 8a8:	1c 82       	std	Y+4, r1	; 0x04
 8aa:	1b 82       	std	Y+3, r1	; 0x03
		Port_PinType* Port_ptr=NULL_PTR;
 8ac:	1a 82       	std	Y+2, r1	; 0x02
 8ae:	19 82       	std	Y+1, r1	; 0x01
		for(i=0;i<32;i++){
 8b0:	1e 82       	std	Y+6, r1	; 0x06
 8b2:	c6 c1       	rjmp	.+908    	; 0xc40 <Port_Init+0x3c8>
			if(ConfigPtr->Port_Pins[i].mode==PORT_PIN_MODE_DIO){
 8b4:	8e 81       	ldd	r24, Y+6	; 0x06
 8b6:	28 2f       	mov	r18, r24
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	4f 81       	ldd	r20, Y+7	; 0x07
 8bc:	58 85       	ldd	r21, Y+8	; 0x08
 8be:	c9 01       	movw	r24, r18
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	82 0f       	add	r24, r18
 8c6:	93 1f       	adc	r25, r19
 8c8:	01 96       	adiw	r24, 0x01	; 1
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	fa 01       	movw	r30, r20
 8d0:	e8 0f       	add	r30, r24
 8d2:	f9 1f       	adc	r31, r25
 8d4:	80 81       	ld	r24, Z
 8d6:	82 30       	cpi	r24, 0x02	; 2
 8d8:	09 f0       	breq	.+2      	; 0x8dc <Port_Init+0x64>
 8da:	c4 c0       	rjmp	.+392    	; 0xa64 <Port_Init+0x1ec>
				if(ConfigPtr->Port_Pins[i].pin<8){
 8dc:	8e 81       	ldd	r24, Y+6	; 0x06
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	4f 81       	ldd	r20, Y+7	; 0x07
 8e4:	58 85       	ldd	r21, Y+8	; 0x08
 8e6:	c9 01       	movw	r24, r18
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	82 0f       	add	r24, r18
 8ee:	93 1f       	adc	r25, r19
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	fa 01       	movw	r30, r20
 8f6:	e8 0f       	add	r30, r24
 8f8:	f9 1f       	adc	r31, r25
 8fa:	80 81       	ld	r24, Z
 8fc:	88 30       	cpi	r24, 0x08	; 8
 8fe:	d0 f4       	brcc	.+52     	; 0x934 <Port_Init+0xbc>
					DDR_ptr=&DDRA_REG;
 900:	8a e3       	ldi	r24, 0x3A	; 58
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	9c 83       	std	Y+4, r25	; 0x04
 906:	8b 83       	std	Y+3, r24	; 0x03
					Port_ptr=&PORTA_REG;
 908:	8b e3       	ldi	r24, 0x3B	; 59
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	9a 83       	std	Y+2, r25	; 0x02
 90e:	89 83       	std	Y+1, r24	; 0x01
					pin_num=ConfigPtr->Port_Pins[i].pin;
 910:	8e 81       	ldd	r24, Y+6	; 0x06
 912:	28 2f       	mov	r18, r24
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	4f 81       	ldd	r20, Y+7	; 0x07
 918:	58 85       	ldd	r21, Y+8	; 0x08
 91a:	c9 01       	movw	r24, r18
 91c:	88 0f       	add	r24, r24
 91e:	99 1f       	adc	r25, r25
 920:	82 0f       	add	r24, r18
 922:	93 1f       	adc	r25, r19
 924:	88 0f       	add	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	fa 01       	movw	r30, r20
 92a:	e8 0f       	add	r30, r24
 92c:	f9 1f       	adc	r31, r25
 92e:	80 81       	ld	r24, Z
 930:	8d 83       	std	Y+5, r24	; 0x05
 932:	98 c0       	rjmp	.+304    	; 0xa64 <Port_Init+0x1ec>
				}else if(ConfigPtr->Port_Pins[i].pin>=8&&ConfigPtr->Port_Pins[i].pin<16){
 934:	8e 81       	ldd	r24, Y+6	; 0x06
 936:	28 2f       	mov	r18, r24
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	4f 81       	ldd	r20, Y+7	; 0x07
 93c:	58 85       	ldd	r21, Y+8	; 0x08
 93e:	c9 01       	movw	r24, r18
 940:	88 0f       	add	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	82 0f       	add	r24, r18
 946:	93 1f       	adc	r25, r19
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	fa 01       	movw	r30, r20
 94e:	e8 0f       	add	r30, r24
 950:	f9 1f       	adc	r31, r25
 952:	80 81       	ld	r24, Z
 954:	88 30       	cpi	r24, 0x08	; 8
 956:	68 f1       	brcs	.+90     	; 0x9b2 <Port_Init+0x13a>
 958:	8e 81       	ldd	r24, Y+6	; 0x06
 95a:	28 2f       	mov	r18, r24
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	4f 81       	ldd	r20, Y+7	; 0x07
 960:	58 85       	ldd	r21, Y+8	; 0x08
 962:	c9 01       	movw	r24, r18
 964:	88 0f       	add	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	82 0f       	add	r24, r18
 96a:	93 1f       	adc	r25, r19
 96c:	88 0f       	add	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	fa 01       	movw	r30, r20
 972:	e8 0f       	add	r30, r24
 974:	f9 1f       	adc	r31, r25
 976:	80 81       	ld	r24, Z
 978:	80 31       	cpi	r24, 0x10	; 16
 97a:	d8 f4       	brcc	.+54     	; 0x9b2 <Port_Init+0x13a>
					DDR_ptr=&DDRB_REG;
 97c:	87 e3       	ldi	r24, 0x37	; 55
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	9c 83       	std	Y+4, r25	; 0x04
 982:	8b 83       	std	Y+3, r24	; 0x03
					Port_ptr=&PORTB_REG;
 984:	88 e3       	ldi	r24, 0x38	; 56
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	9a 83       	std	Y+2, r25	; 0x02
 98a:	89 83       	std	Y+1, r24	; 0x01
					pin_num=ConfigPtr->Port_Pins[i].pin-8;
 98c:	8e 81       	ldd	r24, Y+6	; 0x06
 98e:	28 2f       	mov	r18, r24
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	4f 81       	ldd	r20, Y+7	; 0x07
 994:	58 85       	ldd	r21, Y+8	; 0x08
 996:	c9 01       	movw	r24, r18
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	82 0f       	add	r24, r18
 99e:	93 1f       	adc	r25, r19
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	fa 01       	movw	r30, r20
 9a6:	e8 0f       	add	r30, r24
 9a8:	f9 1f       	adc	r31, r25
 9aa:	80 81       	ld	r24, Z
 9ac:	88 50       	subi	r24, 0x08	; 8
 9ae:	8d 83       	std	Y+5, r24	; 0x05
 9b0:	59 c0       	rjmp	.+178    	; 0xa64 <Port_Init+0x1ec>
				}else if(ConfigPtr->Port_Pins[i].pin>=16&&ConfigPtr->Port_Pins[i].pin<24){
 9b2:	8e 81       	ldd	r24, Y+6	; 0x06
 9b4:	28 2f       	mov	r18, r24
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	4f 81       	ldd	r20, Y+7	; 0x07
 9ba:	58 85       	ldd	r21, Y+8	; 0x08
 9bc:	c9 01       	movw	r24, r18
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	82 0f       	add	r24, r18
 9c4:	93 1f       	adc	r25, r19
 9c6:	88 0f       	add	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	fa 01       	movw	r30, r20
 9cc:	e8 0f       	add	r30, r24
 9ce:	f9 1f       	adc	r31, r25
 9d0:	80 81       	ld	r24, Z
 9d2:	80 31       	cpi	r24, 0x10	; 16
 9d4:	68 f1       	brcs	.+90     	; 0xa30 <Port_Init+0x1b8>
 9d6:	8e 81       	ldd	r24, Y+6	; 0x06
 9d8:	28 2f       	mov	r18, r24
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	4f 81       	ldd	r20, Y+7	; 0x07
 9de:	58 85       	ldd	r21, Y+8	; 0x08
 9e0:	c9 01       	movw	r24, r18
 9e2:	88 0f       	add	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	82 0f       	add	r24, r18
 9e8:	93 1f       	adc	r25, r19
 9ea:	88 0f       	add	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	fa 01       	movw	r30, r20
 9f0:	e8 0f       	add	r30, r24
 9f2:	f9 1f       	adc	r31, r25
 9f4:	80 81       	ld	r24, Z
 9f6:	88 31       	cpi	r24, 0x18	; 24
 9f8:	d8 f4       	brcc	.+54     	; 0xa30 <Port_Init+0x1b8>
					DDR_ptr=&DDRC_REG;
 9fa:	84 e3       	ldi	r24, 0x34	; 52
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	9c 83       	std	Y+4, r25	; 0x04
 a00:	8b 83       	std	Y+3, r24	; 0x03
					Port_ptr=&PORTC_REG;
 a02:	85 e3       	ldi	r24, 0x35	; 53
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	9a 83       	std	Y+2, r25	; 0x02
 a08:	89 83       	std	Y+1, r24	; 0x01
					pin_num=ConfigPtr->Port_Pins[i].pin-16;
 a0a:	8e 81       	ldd	r24, Y+6	; 0x06
 a0c:	28 2f       	mov	r18, r24
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	4f 81       	ldd	r20, Y+7	; 0x07
 a12:	58 85       	ldd	r21, Y+8	; 0x08
 a14:	c9 01       	movw	r24, r18
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	82 0f       	add	r24, r18
 a1c:	93 1f       	adc	r25, r19
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	fa 01       	movw	r30, r20
 a24:	e8 0f       	add	r30, r24
 a26:	f9 1f       	adc	r31, r25
 a28:	80 81       	ld	r24, Z
 a2a:	80 51       	subi	r24, 0x10	; 16
 a2c:	8d 83       	std	Y+5, r24	; 0x05
 a2e:	1a c0       	rjmp	.+52     	; 0xa64 <Port_Init+0x1ec>
				}else{
					DDR_ptr=&DDRD_REG;
 a30:	81 e3       	ldi	r24, 0x31	; 49
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	9c 83       	std	Y+4, r25	; 0x04
 a36:	8b 83       	std	Y+3, r24	; 0x03
					Port_ptr=&PORTD_REG;
 a38:	82 e3       	ldi	r24, 0x32	; 50
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	9a 83       	std	Y+2, r25	; 0x02
 a3e:	89 83       	std	Y+1, r24	; 0x01
					pin_num=ConfigPtr->Port_Pins[i].pin-24;
 a40:	8e 81       	ldd	r24, Y+6	; 0x06
 a42:	28 2f       	mov	r18, r24
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	4f 81       	ldd	r20, Y+7	; 0x07
 a48:	58 85       	ldd	r21, Y+8	; 0x08
 a4a:	c9 01       	movw	r24, r18
 a4c:	88 0f       	add	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	82 0f       	add	r24, r18
 a52:	93 1f       	adc	r25, r19
 a54:	88 0f       	add	r24, r24
 a56:	99 1f       	adc	r25, r25
 a58:	fa 01       	movw	r30, r20
 a5a:	e8 0f       	add	r30, r24
 a5c:	f9 1f       	adc	r31, r25
 a5e:	80 81       	ld	r24, Z
 a60:	88 51       	subi	r24, 0x18	; 24
 a62:	8d 83       	std	Y+5, r24	; 0x05
				}
			}
			if(ConfigPtr->Port_Pins[i].dir==PORT_PIN_OUT)
 a64:	8e 81       	ldd	r24, Y+6	; 0x06
 a66:	28 2f       	mov	r18, r24
 a68:	30 e0       	ldi	r19, 0x00	; 0
 a6a:	4f 81       	ldd	r20, Y+7	; 0x07
 a6c:	58 85       	ldd	r21, Y+8	; 0x08
 a6e:	c9 01       	movw	r24, r18
 a70:	88 0f       	add	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	82 0f       	add	r24, r18
 a76:	93 1f       	adc	r25, r19
 a78:	88 0f       	add	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	84 0f       	add	r24, r20
 a7e:	95 1f       	adc	r25, r21
 a80:	fc 01       	movw	r30, r24
 a82:	31 96       	adiw	r30, 0x01	; 1
 a84:	80 81       	ld	r24, Z
 a86:	81 30       	cpi	r24, 0x01	; 1
 a88:	09 f0       	breq	.+2      	; 0xa8c <Port_Init+0x214>
 a8a:	62 c0       	rjmp	.+196    	; 0xb50 <Port_Init+0x2d8>
			{
				SET_BIT(*DDR_ptr,pin_num);
 a8c:	eb 81       	ldd	r30, Y+3	; 0x03
 a8e:	fc 81       	ldd	r31, Y+4	; 0x04
 a90:	80 81       	ld	r24, Z
 a92:	48 2f       	mov	r20, r24
 a94:	8d 81       	ldd	r24, Y+5	; 0x05
 a96:	28 2f       	mov	r18, r24
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <Port_Init+0x22c>
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	2a 95       	dec	r18
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <Port_Init+0x228>
 aa8:	84 2b       	or	r24, r20
 aaa:	eb 81       	ldd	r30, Y+3	; 0x03
 aac:	fc 81       	ldd	r31, Y+4	; 0x04
 aae:	80 83       	st	Z, r24
				if(ConfigPtr->Port_Pins[i].value==PORT_PIN_LEVEL_HIGH)
 ab0:	8e 81       	ldd	r24, Y+6	; 0x06
 ab2:	28 2f       	mov	r18, r24
 ab4:	30 e0       	ldi	r19, 0x00	; 0
 ab6:	4f 81       	ldd	r20, Y+7	; 0x07
 ab8:	58 85       	ldd	r21, Y+8	; 0x08
 aba:	c9 01       	movw	r24, r18
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	82 0f       	add	r24, r18
 ac2:	93 1f       	adc	r25, r19
 ac4:	88 0f       	add	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	84 0f       	add	r24, r20
 aca:	95 1f       	adc	r25, r21
 acc:	fc 01       	movw	r30, r24
 ace:	33 96       	adiw	r30, 0x03	; 3
 ad0:	80 81       	ld	r24, Z
 ad2:	88 23       	and	r24, r24
 ad4:	a1 f4       	brne	.+40     	; 0xafe <Port_Init+0x286>
				{
					SET_BIT(*Port_ptr,pin_num);
 ad6:	e9 81       	ldd	r30, Y+1	; 0x01
 ad8:	fa 81       	ldd	r31, Y+2	; 0x02
 ada:	80 81       	ld	r24, Z
 adc:	48 2f       	mov	r20, r24
 ade:	8d 81       	ldd	r24, Y+5	; 0x05
 ae0:	28 2f       	mov	r18, r24
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	81 e0       	ldi	r24, 0x01	; 1
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	02 2e       	mov	r0, r18
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <Port_Init+0x278>
 aec:	88 0f       	add	r24, r24
 aee:	99 1f       	adc	r25, r25
 af0:	0a 94       	dec	r0
 af2:	e2 f7       	brpl	.-8      	; 0xaec <Port_Init+0x274>
 af4:	84 2b       	or	r24, r20
 af6:	e9 81       	ldd	r30, Y+1	; 0x01
 af8:	fa 81       	ldd	r31, Y+2	; 0x02
 afa:	80 83       	st	Z, r24
 afc:	9e c0       	rjmp	.+316    	; 0xc3a <Port_Init+0x3c2>
				}
				else if(ConfigPtr->Port_Pins[i].value==PORT_PIN_LEVEL_LOW)
 afe:	8e 81       	ldd	r24, Y+6	; 0x06
 b00:	28 2f       	mov	r18, r24
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	4f 81       	ldd	r20, Y+7	; 0x07
 b06:	58 85       	ldd	r21, Y+8	; 0x08
 b08:	c9 01       	movw	r24, r18
 b0a:	88 0f       	add	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	82 0f       	add	r24, r18
 b10:	93 1f       	adc	r25, r19
 b12:	88 0f       	add	r24, r24
 b14:	99 1f       	adc	r25, r25
 b16:	84 0f       	add	r24, r20
 b18:	95 1f       	adc	r25, r21
 b1a:	fc 01       	movw	r30, r24
 b1c:	33 96       	adiw	r30, 0x03	; 3
 b1e:	80 81       	ld	r24, Z
 b20:	81 30       	cpi	r24, 0x01	; 1
 b22:	09 f0       	breq	.+2      	; 0xb26 <Port_Init+0x2ae>
 b24:	8a c0       	rjmp	.+276    	; 0xc3a <Port_Init+0x3c2>
				{
					CLEAR_BIT(*Port_ptr,pin_num);
 b26:	e9 81       	ldd	r30, Y+1	; 0x01
 b28:	fa 81       	ldd	r31, Y+2	; 0x02
 b2a:	80 81       	ld	r24, Z
 b2c:	48 2f       	mov	r20, r24
 b2e:	8d 81       	ldd	r24, Y+5	; 0x05
 b30:	28 2f       	mov	r18, r24
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	02 2e       	mov	r0, r18
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <Port_Init+0x2c8>
 b3c:	88 0f       	add	r24, r24
 b3e:	99 1f       	adc	r25, r25
 b40:	0a 94       	dec	r0
 b42:	e2 f7       	brpl	.-8      	; 0xb3c <Port_Init+0x2c4>
 b44:	80 95       	com	r24
 b46:	84 23       	and	r24, r20
 b48:	e9 81       	ldd	r30, Y+1	; 0x01
 b4a:	fa 81       	ldd	r31, Y+2	; 0x02
 b4c:	80 83       	st	Z, r24
 b4e:	75 c0       	rjmp	.+234    	; 0xc3a <Port_Init+0x3c2>
				}
			}
			else if(ConfigPtr->Port_Pins[i].dir==PORT_PIN_IN){
 b50:	8e 81       	ldd	r24, Y+6	; 0x06
 b52:	28 2f       	mov	r18, r24
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	4f 81       	ldd	r20, Y+7	; 0x07
 b58:	58 85       	ldd	r21, Y+8	; 0x08
 b5a:	c9 01       	movw	r24, r18
 b5c:	88 0f       	add	r24, r24
 b5e:	99 1f       	adc	r25, r25
 b60:	82 0f       	add	r24, r18
 b62:	93 1f       	adc	r25, r19
 b64:	88 0f       	add	r24, r24
 b66:	99 1f       	adc	r25, r25
 b68:	84 0f       	add	r24, r20
 b6a:	95 1f       	adc	r25, r21
 b6c:	fc 01       	movw	r30, r24
 b6e:	31 96       	adiw	r30, 0x01	; 1
 b70:	80 81       	ld	r24, Z
 b72:	88 23       	and	r24, r24
 b74:	09 f0       	breq	.+2      	; 0xb78 <Port_Init+0x300>
 b76:	61 c0       	rjmp	.+194    	; 0xc3a <Port_Init+0x3c2>
				CLEAR_BIT(*DDR_ptr,pin_num);
 b78:	eb 81       	ldd	r30, Y+3	; 0x03
 b7a:	fc 81       	ldd	r31, Y+4	; 0x04
 b7c:	80 81       	ld	r24, Z
 b7e:	48 2f       	mov	r20, r24
 b80:	8d 81       	ldd	r24, Y+5	; 0x05
 b82:	28 2f       	mov	r18, r24
 b84:	30 e0       	ldi	r19, 0x00	; 0
 b86:	81 e0       	ldi	r24, 0x01	; 1
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <Port_Init+0x318>
 b8c:	88 0f       	add	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	2a 95       	dec	r18
 b92:	e2 f7       	brpl	.-8      	; 0xb8c <Port_Init+0x314>
 b94:	80 95       	com	r24
 b96:	84 23       	and	r24, r20
 b98:	eb 81       	ldd	r30, Y+3	; 0x03
 b9a:	fc 81       	ldd	r31, Y+4	; 0x04
 b9c:	80 83       	st	Z, r24
				if(ConfigPtr->Port_Pins[i].value==PORT_PIN_LEVEL_HIGH)
 b9e:	8e 81       	ldd	r24, Y+6	; 0x06
 ba0:	28 2f       	mov	r18, r24
 ba2:	30 e0       	ldi	r19, 0x00	; 0
 ba4:	4f 81       	ldd	r20, Y+7	; 0x07
 ba6:	58 85       	ldd	r21, Y+8	; 0x08
 ba8:	c9 01       	movw	r24, r18
 baa:	88 0f       	add	r24, r24
 bac:	99 1f       	adc	r25, r25
 bae:	82 0f       	add	r24, r18
 bb0:	93 1f       	adc	r25, r19
 bb2:	88 0f       	add	r24, r24
 bb4:	99 1f       	adc	r25, r25
 bb6:	84 0f       	add	r24, r20
 bb8:	95 1f       	adc	r25, r21
 bba:	fc 01       	movw	r30, r24
 bbc:	33 96       	adiw	r30, 0x03	; 3
 bbe:	80 81       	ld	r24, Z
 bc0:	88 23       	and	r24, r24
 bc2:	a1 f4       	brne	.+40     	; 0xbec <Port_Init+0x374>
				{
					SET_BIT(*Port_ptr,pin_num);
 bc4:	e9 81       	ldd	r30, Y+1	; 0x01
 bc6:	fa 81       	ldd	r31, Y+2	; 0x02
 bc8:	80 81       	ld	r24, Z
 bca:	48 2f       	mov	r20, r24
 bcc:	8d 81       	ldd	r24, Y+5	; 0x05
 bce:	28 2f       	mov	r18, r24
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	81 e0       	ldi	r24, 0x01	; 1
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	02 2e       	mov	r0, r18
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <Port_Init+0x366>
 bda:	88 0f       	add	r24, r24
 bdc:	99 1f       	adc	r25, r25
 bde:	0a 94       	dec	r0
 be0:	e2 f7       	brpl	.-8      	; 0xbda <Port_Init+0x362>
 be2:	84 2b       	or	r24, r20
 be4:	e9 81       	ldd	r30, Y+1	; 0x01
 be6:	fa 81       	ldd	r31, Y+2	; 0x02
 be8:	80 83       	st	Z, r24
 bea:	27 c0       	rjmp	.+78     	; 0xc3a <Port_Init+0x3c2>
				}
				else if(ConfigPtr->Port_Pins[i].value==PORT_PIN_LEVEL_LOW)
 bec:	8e 81       	ldd	r24, Y+6	; 0x06
 bee:	28 2f       	mov	r18, r24
 bf0:	30 e0       	ldi	r19, 0x00	; 0
 bf2:	4f 81       	ldd	r20, Y+7	; 0x07
 bf4:	58 85       	ldd	r21, Y+8	; 0x08
 bf6:	c9 01       	movw	r24, r18
 bf8:	88 0f       	add	r24, r24
 bfa:	99 1f       	adc	r25, r25
 bfc:	82 0f       	add	r24, r18
 bfe:	93 1f       	adc	r25, r19
 c00:	88 0f       	add	r24, r24
 c02:	99 1f       	adc	r25, r25
 c04:	84 0f       	add	r24, r20
 c06:	95 1f       	adc	r25, r21
 c08:	fc 01       	movw	r30, r24
 c0a:	33 96       	adiw	r30, 0x03	; 3
 c0c:	80 81       	ld	r24, Z
 c0e:	81 30       	cpi	r24, 0x01	; 1
 c10:	a1 f4       	brne	.+40     	; 0xc3a <Port_Init+0x3c2>
				{
					CLEAR_BIT(*Port_ptr,pin_num);
 c12:	e9 81       	ldd	r30, Y+1	; 0x01
 c14:	fa 81       	ldd	r31, Y+2	; 0x02
 c16:	80 81       	ld	r24, Z
 c18:	48 2f       	mov	r20, r24
 c1a:	8d 81       	ldd	r24, Y+5	; 0x05
 c1c:	28 2f       	mov	r18, r24
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	02 2e       	mov	r0, r18
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <Port_Init+0x3b4>
 c28:	88 0f       	add	r24, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	0a 94       	dec	r0
 c2e:	e2 f7       	brpl	.-8      	; 0xc28 <Port_Init+0x3b0>
 c30:	80 95       	com	r24
 c32:	84 23       	and	r24, r20
 c34:	e9 81       	ldd	r30, Y+1	; 0x01
 c36:	fa 81       	ldd	r31, Y+2	; 0x02
 c38:	80 83       	st	Z, r24
#endif
	{
		uint8 i,pin_num;
		Port_PinType* DDR_ptr=NULL_PTR;
		Port_PinType* Port_ptr=NULL_PTR;
		for(i=0;i<32;i++){
 c3a:	8e 81       	ldd	r24, Y+6	; 0x06
 c3c:	8f 5f       	subi	r24, 0xFF	; 255
 c3e:	8e 83       	std	Y+6, r24	; 0x06
 c40:	8e 81       	ldd	r24, Y+6	; 0x06
 c42:	80 32       	cpi	r24, 0x20	; 32
 c44:	08 f4       	brcc	.+2      	; 0xc48 <Port_Init+0x3d0>
 c46:	36 ce       	rjmp	.-916    	; 0x8b4 <Port_Init+0x3c>
				}
			}

		}
	}
	PORT_Pins=ConfigPtr;
 c48:	8f 81       	ldd	r24, Y+7	; 0x07
 c4a:	98 85       	ldd	r25, Y+8	; 0x08
 c4c:	90 93 31 01 	sts	0x0131, r25
 c50:	80 93 30 01 	sts	0x0130, r24
	PORT_Status=PORT_INITIALIZED;
 c54:	81 e0       	ldi	r24, 0x01	; 1
 c56:	80 93 32 01 	sts	0x0132, r24
}
 c5a:	28 96       	adiw	r28, 0x08	; 8
 c5c:	0f b6       	in	r0, 0x3f	; 63
 c5e:	f8 94       	cli
 c60:	de bf       	out	0x3e, r29	; 62
 c62:	0f be       	out	0x3f, r0	; 63
 c64:	cd bf       	out	0x3d, r28	; 61
 c66:	cf 91       	pop	r28
 c68:	df 91       	pop	r29
 c6a:	08 95       	ret

00000c6c <Port_SetPinDirection>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: None
 * Description: Function to Set the port pin direction
 ************************************************************************************/
void Port_SetPinDirection(Port_PinType Pin,Port_PinDirectionType Direction){
 c6c:	df 93       	push	r29
 c6e:	cf 93       	push	r28
 c70:	00 d0       	rcall	.+0      	; 0xc72 <Port_SetPinDirection+0x6>
 c72:	00 d0       	rcall	.+0      	; 0xc74 <Port_SetPinDirection+0x8>
 c74:	00 d0       	rcall	.+0      	; 0xc76 <Port_SetPinDirection+0xa>
 c76:	cd b7       	in	r28, 0x3d	; 61
 c78:	de b7       	in	r29, 0x3e	; 62
 c7a:	8d 83       	std	Y+5, r24	; 0x05
 c7c:	6e 83       	std	Y+6, r22	; 0x06
	boolean error = FALSE;
 c7e:	1c 82       	std	Y+4, r1	; 0x04

#if (PORT_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (PORT_NOT_INITIALIZED == PORT_Status)
 c80:	80 91 32 01 	lds	r24, 0x0132
 c84:	88 23       	and	r24, r24
 c86:	49 f4       	brne	.+18     	; 0xc9a <Port_SetPinDirection+0x2e>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
 c88:	8c e7       	ldi	r24, 0x7C	; 124
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	60 e0       	ldi	r22, 0x00	; 0
 c8e:	41 e0       	ldi	r20, 0x01	; 1
 c90:	2f e0       	ldi	r18, 0x0F	; 15
 c92:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				PORT_SET_PIN_DIRECTION_SID, PORT_E_UNINIT);
		error = TRUE;
 c96:	81 e0       	ldi	r24, 0x01	; 1
 c98:	8c 83       	std	Y+4, r24	; 0x04
	else
	{
		/* MISRA */
	}
	/* Check if the used pin is within the valid range */
	if (PORT_NUMBER_OF_PORT_PINS <= Pin)
 c9a:	8d 81       	ldd	r24, Y+5	; 0x05
 c9c:	80 32       	cpi	r24, 0x20	; 32
 c9e:	48 f0       	brcs	.+18     	; 0xcb2 <Port_SetPinDirection+0x46>
	{

		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
 ca0:	8c e7       	ldi	r24, 0x7C	; 124
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	60 e0       	ldi	r22, 0x00	; 0
 ca6:	41 e0       	ldi	r20, 0x01	; 1
 ca8:	2a e0       	ldi	r18, 0x0A	; 10
 caa:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				PORT_SET_PIN_DIRECTION_SID,PORT_E_PARAM_PIN);
		error = TRUE;
 cae:	81 e0       	ldi	r24, 0x01	; 1
 cb0:	8c 83       	std	Y+4, r24	; 0x04
	}
	else
	{
		/* MISRA*/
	}
	if(TRUE==PORT_Pins->Port_Pins[Pin].PORT_PIN_DIRECTION_GHANGEABLE)
 cb2:	40 91 30 01 	lds	r20, 0x0130
 cb6:	50 91 31 01 	lds	r21, 0x0131
 cba:	8d 81       	ldd	r24, Y+5	; 0x05
 cbc:	28 2f       	mov	r18, r24
 cbe:	30 e0       	ldi	r19, 0x00	; 0
 cc0:	c9 01       	movw	r24, r18
 cc2:	88 0f       	add	r24, r24
 cc4:	99 1f       	adc	r25, r25
 cc6:	82 0f       	add	r24, r18
 cc8:	93 1f       	adc	r25, r19
 cca:	88 0f       	add	r24, r24
 ccc:	99 1f       	adc	r25, r25
 cce:	84 0f       	add	r24, r20
 cd0:	95 1f       	adc	r25, r21
 cd2:	fc 01       	movw	r30, r24
 cd4:	34 96       	adiw	r30, 0x04	; 4
 cd6:	80 81       	ld	r24, Z
 cd8:	81 30       	cpi	r24, 0x01	; 1
 cda:	49 f4       	brne	.+18     	; 0xcee <Port_SetPinDirection+0x82>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
 cdc:	8c e7       	ldi	r24, 0x7C	; 124
 cde:	90 e0       	ldi	r25, 0x00	; 0
 ce0:	60 e0       	ldi	r22, 0x00	; 0
 ce2:	41 e0       	ldi	r20, 0x01	; 1
 ce4:	2b e0       	ldi	r18, 0x0B	; 11
 ce6:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
						PORT_SET_PIN_DIRECTION_SID,PORT_E_DIRECTION_UNCHANGEABLE );
				error = TRUE;
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	8c 83       	std	Y+4, r24	; 0x04
		/*MISRA*/
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 cee:	8c 81       	ldd	r24, Y+4	; 0x04
 cf0:	88 23       	and	r24, r24
 cf2:	09 f0       	breq	.+2      	; 0xcf6 <Port_SetPinDirection+0x8a>
 cf4:	5c c0       	rjmp	.+184    	; 0xdae <Port_SetPinDirection+0x142>
	{
			uint8 pin_num=0;
 cf6:	1b 82       	std	Y+3, r1	; 0x03
			Port_PinType* DDR_ptr=NULL_PTR;
 cf8:	1a 82       	std	Y+2, r1	; 0x02
 cfa:	19 82       	std	Y+1, r1	; 0x01
			if(Pin<8){
 cfc:	8d 81       	ldd	r24, Y+5	; 0x05
 cfe:	88 30       	cpi	r24, 0x08	; 8
 d00:	28 f4       	brcc	.+10     	; 0xd0c <Port_SetPinDirection+0xa0>
				DDR_ptr=&DDRA_REG;
 d02:	8a e3       	ldi	r24, 0x3A	; 58
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	9a 83       	std	Y+2, r25	; 0x02
 d08:	89 83       	std	Y+1, r24	; 0x01
 d0a:	23 c0       	rjmp	.+70     	; 0xd52 <Port_SetPinDirection+0xe6>
			}else if(Pin>=8&&Pin<16){
 d0c:	8d 81       	ldd	r24, Y+5	; 0x05
 d0e:	88 30       	cpi	r24, 0x08	; 8
 d10:	58 f0       	brcs	.+22     	; 0xd28 <Port_SetPinDirection+0xbc>
 d12:	8d 81       	ldd	r24, Y+5	; 0x05
 d14:	80 31       	cpi	r24, 0x10	; 16
 d16:	40 f4       	brcc	.+16     	; 0xd28 <Port_SetPinDirection+0xbc>
				DDR_ptr=&DDRB_REG;
 d18:	87 e3       	ldi	r24, 0x37	; 55
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	9a 83       	std	Y+2, r25	; 0x02
 d1e:	89 83       	std	Y+1, r24	; 0x01
				pin_num=Pin-8;
 d20:	8d 81       	ldd	r24, Y+5	; 0x05
 d22:	88 50       	subi	r24, 0x08	; 8
 d24:	8b 83       	std	Y+3, r24	; 0x03
 d26:	15 c0       	rjmp	.+42     	; 0xd52 <Port_SetPinDirection+0xe6>
			}else if(Pin>=16&&Pin<24){
 d28:	8d 81       	ldd	r24, Y+5	; 0x05
 d2a:	80 31       	cpi	r24, 0x10	; 16
 d2c:	58 f0       	brcs	.+22     	; 0xd44 <Port_SetPinDirection+0xd8>
 d2e:	8d 81       	ldd	r24, Y+5	; 0x05
 d30:	88 31       	cpi	r24, 0x18	; 24
 d32:	40 f4       	brcc	.+16     	; 0xd44 <Port_SetPinDirection+0xd8>
				DDR_ptr=&DDRC_REG;
 d34:	84 e3       	ldi	r24, 0x34	; 52
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	9a 83       	std	Y+2, r25	; 0x02
 d3a:	89 83       	std	Y+1, r24	; 0x01
				pin_num=Pin-16;
 d3c:	8d 81       	ldd	r24, Y+5	; 0x05
 d3e:	80 51       	subi	r24, 0x10	; 16
 d40:	8b 83       	std	Y+3, r24	; 0x03
 d42:	07 c0       	rjmp	.+14     	; 0xd52 <Port_SetPinDirection+0xe6>
			}else{
				DDR_ptr=&DDRD_REG;
 d44:	81 e3       	ldi	r24, 0x31	; 49
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	9a 83       	std	Y+2, r25	; 0x02
 d4a:	89 83       	std	Y+1, r24	; 0x01
				pin_num=Pin-24;
 d4c:	8d 81       	ldd	r24, Y+5	; 0x05
 d4e:	88 51       	subi	r24, 0x18	; 24
 d50:	8b 83       	std	Y+3, r24	; 0x03
			}
			if(PORT_PIN_OUT==Direction){
 d52:	8e 81       	ldd	r24, Y+6	; 0x06
 d54:	81 30       	cpi	r24, 0x01	; 1
 d56:	a1 f4       	brne	.+40     	; 0xd80 <Port_SetPinDirection+0x114>
				SET_BIT(*DDR_ptr,pin_num);
 d58:	e9 81       	ldd	r30, Y+1	; 0x01
 d5a:	fa 81       	ldd	r31, Y+2	; 0x02
 d5c:	80 81       	ld	r24, Z
 d5e:	48 2f       	mov	r20, r24
 d60:	8b 81       	ldd	r24, Y+3	; 0x03
 d62:	28 2f       	mov	r18, r24
 d64:	30 e0       	ldi	r19, 0x00	; 0
 d66:	81 e0       	ldi	r24, 0x01	; 1
 d68:	90 e0       	ldi	r25, 0x00	; 0
 d6a:	02 2e       	mov	r0, r18
 d6c:	02 c0       	rjmp	.+4      	; 0xd72 <Port_SetPinDirection+0x106>
 d6e:	88 0f       	add	r24, r24
 d70:	99 1f       	adc	r25, r25
 d72:	0a 94       	dec	r0
 d74:	e2 f7       	brpl	.-8      	; 0xd6e <Port_SetPinDirection+0x102>
 d76:	84 2b       	or	r24, r20
 d78:	e9 81       	ldd	r30, Y+1	; 0x01
 d7a:	fa 81       	ldd	r31, Y+2	; 0x02
 d7c:	80 83       	st	Z, r24
 d7e:	17 c0       	rjmp	.+46     	; 0xdae <Port_SetPinDirection+0x142>
			}else if(PORT_PIN_IN==Direction){
 d80:	8e 81       	ldd	r24, Y+6	; 0x06
 d82:	88 23       	and	r24, r24
 d84:	a1 f4       	brne	.+40     	; 0xdae <Port_SetPinDirection+0x142>
				CLEAR_BIT(*DDR_ptr,pin_num);
 d86:	e9 81       	ldd	r30, Y+1	; 0x01
 d88:	fa 81       	ldd	r31, Y+2	; 0x02
 d8a:	80 81       	ld	r24, Z
 d8c:	48 2f       	mov	r20, r24
 d8e:	8b 81       	ldd	r24, Y+3	; 0x03
 d90:	28 2f       	mov	r18, r24
 d92:	30 e0       	ldi	r19, 0x00	; 0
 d94:	81 e0       	ldi	r24, 0x01	; 1
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	02 2e       	mov	r0, r18
 d9a:	02 c0       	rjmp	.+4      	; 0xda0 <Port_SetPinDirection+0x134>
 d9c:	88 0f       	add	r24, r24
 d9e:	99 1f       	adc	r25, r25
 da0:	0a 94       	dec	r0
 da2:	e2 f7       	brpl	.-8      	; 0xd9c <Port_SetPinDirection+0x130>
 da4:	80 95       	com	r24
 da6:	84 23       	and	r24, r20
 da8:	e9 81       	ldd	r30, Y+1	; 0x01
 daa:	fa 81       	ldd	r31, Y+2	; 0x02
 dac:	80 83       	st	Z, r24
		}
	else
	{
		/*MISRA*/
	}
}
 dae:	26 96       	adiw	r28, 0x06	; 6
 db0:	0f b6       	in	r0, 0x3f	; 63
 db2:	f8 94       	cli
 db4:	de bf       	out	0x3e, r29	; 62
 db6:	0f be       	out	0x3f, r0	; 63
 db8:	cd bf       	out	0x3d, r28	; 61
 dba:	cf 91       	pop	r28
 dbc:	df 91       	pop	r29
 dbe:	08 95       	ret

00000dc0 <Port_RefreshPortDirection>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: None
 * Description: Function to Refreshe port direction
 ************************************************************************************/
void Port_RefreshPortDirection(void){
 dc0:	df 93       	push	r29
 dc2:	cf 93       	push	r28
 dc4:	00 d0       	rcall	.+0      	; 0xdc6 <Port_RefreshPortDirection+0x6>
 dc6:	00 d0       	rcall	.+0      	; 0xdc8 <Port_RefreshPortDirection+0x8>
 dc8:	0f 92       	push	r0
 dca:	cd b7       	in	r28, 0x3d	; 61
 dcc:	de b7       	in	r29, 0x3e	; 62
	boolean error = FALSE;
 dce:	1d 82       	std	Y+5, r1	; 0x05

#if (PORT_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (PORT_NOT_INITIALIZED == PORT_Status)
 dd0:	80 91 32 01 	lds	r24, 0x0132
 dd4:	88 23       	and	r24, r24
 dd6:	49 f4       	brne	.+18     	; 0xdea <Port_RefreshPortDirection+0x2a>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
 dd8:	8c e7       	ldi	r24, 0x7C	; 124
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	60 e0       	ldi	r22, 0x00	; 0
 dde:	41 e0       	ldi	r20, 0x01	; 1
 de0:	2f e0       	ldi	r18, 0x0F	; 15
 de2:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				PORT_SET_PIN_DIRECTION_SID, PORT_E_UNINIT);
		error = TRUE;
 de6:	81 e0       	ldi	r24, 0x01	; 1
 de8:	8d 83       	std	Y+5, r24	; 0x05
		/* MISRA */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 dea:	8d 81       	ldd	r24, Y+5	; 0x05
 dec:	88 23       	and	r24, r24
 dee:	09 f0       	breq	.+2      	; 0xdf2 <Port_RefreshPortDirection+0x32>
 df0:	89 c0       	rjmp	.+274    	; 0xf04 <Port_RefreshPortDirection+0x144>
	{
		uint8 i,pin_num=0;
 df2:	1b 82       	std	Y+3, r1	; 0x03
		Port_PinType* DDR_ptr=NULL_PTR;
 df4:	1a 82       	std	Y+2, r1	; 0x02
 df6:	19 82       	std	Y+1, r1	; 0x01
		for(i=0;i<32;i++){
 df8:	1c 82       	std	Y+4, r1	; 0x04
 dfa:	80 c0       	rjmp	.+256    	; 0xefc <Port_RefreshPortDirection+0x13c>
			if(i<8){
 dfc:	8c 81       	ldd	r24, Y+4	; 0x04
 dfe:	88 30       	cpi	r24, 0x08	; 8
 e00:	28 f4       	brcc	.+10     	; 0xe0c <Port_RefreshPortDirection+0x4c>
				DDR_ptr=&DDRA_REG;
 e02:	8a e3       	ldi	r24, 0x3A	; 58
 e04:	90 e0       	ldi	r25, 0x00	; 0
 e06:	9a 83       	std	Y+2, r25	; 0x02
 e08:	89 83       	std	Y+1, r24	; 0x01
 e0a:	23 c0       	rjmp	.+70     	; 0xe52 <Port_RefreshPortDirection+0x92>
			}else if(i>=8&&i<16){
 e0c:	8c 81       	ldd	r24, Y+4	; 0x04
 e0e:	88 30       	cpi	r24, 0x08	; 8
 e10:	58 f0       	brcs	.+22     	; 0xe28 <Port_RefreshPortDirection+0x68>
 e12:	8c 81       	ldd	r24, Y+4	; 0x04
 e14:	80 31       	cpi	r24, 0x10	; 16
 e16:	40 f4       	brcc	.+16     	; 0xe28 <Port_RefreshPortDirection+0x68>
				DDR_ptr=&DDRB_REG;
 e18:	87 e3       	ldi	r24, 0x37	; 55
 e1a:	90 e0       	ldi	r25, 0x00	; 0
 e1c:	9a 83       	std	Y+2, r25	; 0x02
 e1e:	89 83       	std	Y+1, r24	; 0x01
				pin_num=i-8;
 e20:	8c 81       	ldd	r24, Y+4	; 0x04
 e22:	88 50       	subi	r24, 0x08	; 8
 e24:	8b 83       	std	Y+3, r24	; 0x03
 e26:	15 c0       	rjmp	.+42     	; 0xe52 <Port_RefreshPortDirection+0x92>
			}else if(i>=16&&i<24){
 e28:	8c 81       	ldd	r24, Y+4	; 0x04
 e2a:	80 31       	cpi	r24, 0x10	; 16
 e2c:	58 f0       	brcs	.+22     	; 0xe44 <Port_RefreshPortDirection+0x84>
 e2e:	8c 81       	ldd	r24, Y+4	; 0x04
 e30:	88 31       	cpi	r24, 0x18	; 24
 e32:	40 f4       	brcc	.+16     	; 0xe44 <Port_RefreshPortDirection+0x84>
				DDR_ptr=&DDRC_REG;
 e34:	84 e3       	ldi	r24, 0x34	; 52
 e36:	90 e0       	ldi	r25, 0x00	; 0
 e38:	9a 83       	std	Y+2, r25	; 0x02
 e3a:	89 83       	std	Y+1, r24	; 0x01
				pin_num=i-16;
 e3c:	8c 81       	ldd	r24, Y+4	; 0x04
 e3e:	80 51       	subi	r24, 0x10	; 16
 e40:	8b 83       	std	Y+3, r24	; 0x03
 e42:	07 c0       	rjmp	.+14     	; 0xe52 <Port_RefreshPortDirection+0x92>
			}else{
				DDR_ptr=&DDRD_REG;
 e44:	81 e3       	ldi	r24, 0x31	; 49
 e46:	90 e0       	ldi	r25, 0x00	; 0
 e48:	9a 83       	std	Y+2, r25	; 0x02
 e4a:	89 83       	std	Y+1, r24	; 0x01
				pin_num=i-24;
 e4c:	8c 81       	ldd	r24, Y+4	; 0x04
 e4e:	88 51       	subi	r24, 0x18	; 24
 e50:	8b 83       	std	Y+3, r24	; 0x03
			}
			if(PORT_Pins->Port_Pins[i].dir==PORT_PIN_OUT){
 e52:	40 91 30 01 	lds	r20, 0x0130
 e56:	50 91 31 01 	lds	r21, 0x0131
 e5a:	8c 81       	ldd	r24, Y+4	; 0x04
 e5c:	28 2f       	mov	r18, r24
 e5e:	30 e0       	ldi	r19, 0x00	; 0
 e60:	c9 01       	movw	r24, r18
 e62:	88 0f       	add	r24, r24
 e64:	99 1f       	adc	r25, r25
 e66:	82 0f       	add	r24, r18
 e68:	93 1f       	adc	r25, r19
 e6a:	88 0f       	add	r24, r24
 e6c:	99 1f       	adc	r25, r25
 e6e:	84 0f       	add	r24, r20
 e70:	95 1f       	adc	r25, r21
 e72:	fc 01       	movw	r30, r24
 e74:	31 96       	adiw	r30, 0x01	; 1
 e76:	80 81       	ld	r24, Z
 e78:	81 30       	cpi	r24, 0x01	; 1
 e7a:	a1 f4       	brne	.+40     	; 0xea4 <Port_RefreshPortDirection+0xe4>
				SET_BIT(*DDR_ptr,pin_num);
 e7c:	e9 81       	ldd	r30, Y+1	; 0x01
 e7e:	fa 81       	ldd	r31, Y+2	; 0x02
 e80:	80 81       	ld	r24, Z
 e82:	48 2f       	mov	r20, r24
 e84:	8b 81       	ldd	r24, Y+3	; 0x03
 e86:	28 2f       	mov	r18, r24
 e88:	30 e0       	ldi	r19, 0x00	; 0
 e8a:	81 e0       	ldi	r24, 0x01	; 1
 e8c:	90 e0       	ldi	r25, 0x00	; 0
 e8e:	02 2e       	mov	r0, r18
 e90:	02 c0       	rjmp	.+4      	; 0xe96 <Port_RefreshPortDirection+0xd6>
 e92:	88 0f       	add	r24, r24
 e94:	99 1f       	adc	r25, r25
 e96:	0a 94       	dec	r0
 e98:	e2 f7       	brpl	.-8      	; 0xe92 <Port_RefreshPortDirection+0xd2>
 e9a:	84 2b       	or	r24, r20
 e9c:	e9 81       	ldd	r30, Y+1	; 0x01
 e9e:	fa 81       	ldd	r31, Y+2	; 0x02
 ea0:	80 83       	st	Z, r24
 ea2:	29 c0       	rjmp	.+82     	; 0xef6 <Port_RefreshPortDirection+0x136>
			}else if(PORT_Pins->Port_Pins[i].dir==PORT_PIN_IN){
 ea4:	40 91 30 01 	lds	r20, 0x0130
 ea8:	50 91 31 01 	lds	r21, 0x0131
 eac:	8c 81       	ldd	r24, Y+4	; 0x04
 eae:	28 2f       	mov	r18, r24
 eb0:	30 e0       	ldi	r19, 0x00	; 0
 eb2:	c9 01       	movw	r24, r18
 eb4:	88 0f       	add	r24, r24
 eb6:	99 1f       	adc	r25, r25
 eb8:	82 0f       	add	r24, r18
 eba:	93 1f       	adc	r25, r19
 ebc:	88 0f       	add	r24, r24
 ebe:	99 1f       	adc	r25, r25
 ec0:	84 0f       	add	r24, r20
 ec2:	95 1f       	adc	r25, r21
 ec4:	fc 01       	movw	r30, r24
 ec6:	31 96       	adiw	r30, 0x01	; 1
 ec8:	80 81       	ld	r24, Z
 eca:	88 23       	and	r24, r24
 ecc:	a1 f4       	brne	.+40     	; 0xef6 <Port_RefreshPortDirection+0x136>
				CLEAR_BIT(*DDR_ptr,pin_num);
 ece:	e9 81       	ldd	r30, Y+1	; 0x01
 ed0:	fa 81       	ldd	r31, Y+2	; 0x02
 ed2:	80 81       	ld	r24, Z
 ed4:	48 2f       	mov	r20, r24
 ed6:	8b 81       	ldd	r24, Y+3	; 0x03
 ed8:	28 2f       	mov	r18, r24
 eda:	30 e0       	ldi	r19, 0x00	; 0
 edc:	81 e0       	ldi	r24, 0x01	; 1
 ede:	90 e0       	ldi	r25, 0x00	; 0
 ee0:	02 2e       	mov	r0, r18
 ee2:	02 c0       	rjmp	.+4      	; 0xee8 <Port_RefreshPortDirection+0x128>
 ee4:	88 0f       	add	r24, r24
 ee6:	99 1f       	adc	r25, r25
 ee8:	0a 94       	dec	r0
 eea:	e2 f7       	brpl	.-8      	; 0xee4 <Port_RefreshPortDirection+0x124>
 eec:	80 95       	com	r24
 eee:	84 23       	and	r24, r20
 ef0:	e9 81       	ldd	r30, Y+1	; 0x01
 ef2:	fa 81       	ldd	r31, Y+2	; 0x02
 ef4:	80 83       	st	Z, r24
	/* In-case there are no errors */
	if(FALSE == error)
	{
		uint8 i,pin_num=0;
		Port_PinType* DDR_ptr=NULL_PTR;
		for(i=0;i<32;i++){
 ef6:	8c 81       	ldd	r24, Y+4	; 0x04
 ef8:	8f 5f       	subi	r24, 0xFF	; 255
 efa:	8c 83       	std	Y+4, r24	; 0x04
 efc:	8c 81       	ldd	r24, Y+4	; 0x04
 efe:	80 32       	cpi	r24, 0x20	; 32
 f00:	08 f4       	brcc	.+2      	; 0xf04 <Port_RefreshPortDirection+0x144>
 f02:	7c cf       	rjmp	.-264    	; 0xdfc <Port_RefreshPortDirection+0x3c>
			}else if(PORT_Pins->Port_Pins[i].dir==PORT_PIN_IN){
				CLEAR_BIT(*DDR_ptr,pin_num);
			}
		}
	}
}
 f04:	0f 90       	pop	r0
 f06:	0f 90       	pop	r0
 f08:	0f 90       	pop	r0
 f0a:	0f 90       	pop	r0
 f0c:	0f 90       	pop	r0
 f0e:	cf 91       	pop	r28
 f10:	df 91       	pop	r29
 f12:	08 95       	ret

00000f14 <Port_SetPinMode>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: None
 * Description: Function to Set the port pin mode
 ************************************************************************************/
void Port_SetPinMode(Port_PinType Pin,Port_PinModeType Mode){
 f14:	df 93       	push	r29
 f16:	cf 93       	push	r28
 f18:	00 d0       	rcall	.+0      	; 0xf1a <Port_SetPinMode+0x6>
 f1a:	0f 92       	push	r0
 f1c:	cd b7       	in	r28, 0x3d	; 61
 f1e:	de b7       	in	r29, 0x3e	; 62
 f20:	8a 83       	std	Y+2, r24	; 0x02
 f22:	6b 83       	std	Y+3, r22	; 0x03
	boolean error = FALSE;
 f24:	19 82       	std	Y+1, r1	; 0x01

#if (PORT_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (PORT_NOT_INITIALIZED == PORT_Status)
 f26:	80 91 32 01 	lds	r24, 0x0132
 f2a:	88 23       	and	r24, r24
 f2c:	49 f4       	brne	.+18     	; 0xf40 <Port_SetPinMode+0x2c>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
 f2e:	8c e7       	ldi	r24, 0x7C	; 124
 f30:	90 e0       	ldi	r25, 0x00	; 0
 f32:	60 e0       	ldi	r22, 0x00	; 0
 f34:	44 e0       	ldi	r20, 0x04	; 4
 f36:	2f e0       	ldi	r18, 0x0F	; 15
 f38:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				PORT_SET_PIN_MODE_SID, PORT_E_UNINIT);
		error = TRUE;
 f3c:	81 e0       	ldi	r24, 0x01	; 1
 f3e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* MISRA */
	}
	/* Check if the used pin is within the valid range */
	if (PORT_NUMBER_OF_PORT_PINS <= Pin)
 f40:	8a 81       	ldd	r24, Y+2	; 0x02
 f42:	80 32       	cpi	r24, 0x20	; 32
 f44:	48 f0       	brcs	.+18     	; 0xf58 <Port_SetPinMode+0x44>
	{

		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
 f46:	8c e7       	ldi	r24, 0x7C	; 124
 f48:	90 e0       	ldi	r25, 0x00	; 0
 f4a:	60 e0       	ldi	r22, 0x00	; 0
 f4c:	41 e0       	ldi	r20, 0x01	; 1
 f4e:	2a e0       	ldi	r18, 0x0A	; 10
 f50:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				PORT_SET_PIN_DIRECTION_SID,PORT_E_PARAM_PIN);
		error = TRUE;
 f54:	81 e0       	ldi	r24, 0x01	; 1
 f56:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* MISRA*/
	}
	if(PORT_NUMBER_OF_MODES<=Mode)
 f58:	8b 81       	ldd	r24, Y+3	; 0x03
 f5a:	8b 30       	cpi	r24, 0x0B	; 11
 f5c:	48 f0       	brcs	.+18     	; 0xf70 <Port_SetPinMode+0x5c>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
 f5e:	8c e7       	ldi	r24, 0x7C	; 124
 f60:	90 e0       	ldi	r25, 0x00	; 0
 f62:	60 e0       	ldi	r22, 0x00	; 0
 f64:	44 e0       	ldi	r20, 0x04	; 4
 f66:	2d e0       	ldi	r18, 0x0D	; 13
 f68:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				PORT_SET_PIN_MODE_SID,PORT_E_PARAM_INVALID_MODE);
		error = TRUE;
 f6c:	81 e0       	ldi	r24, 0x01	; 1
 f6e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*MISRA*/
	}
	if(FALSE==PORT_Pins->Port_Pins[Pin].PORT_PIN_MODE_CHANGEABLE)
 f70:	40 91 30 01 	lds	r20, 0x0130
 f74:	50 91 31 01 	lds	r21, 0x0131
 f78:	8a 81       	ldd	r24, Y+2	; 0x02
 f7a:	28 2f       	mov	r18, r24
 f7c:	30 e0       	ldi	r19, 0x00	; 0
 f7e:	c9 01       	movw	r24, r18
 f80:	88 0f       	add	r24, r24
 f82:	99 1f       	adc	r25, r25
 f84:	82 0f       	add	r24, r18
 f86:	93 1f       	adc	r25, r19
 f88:	88 0f       	add	r24, r24
 f8a:	99 1f       	adc	r25, r25
 f8c:	84 0f       	add	r24, r20
 f8e:	95 1f       	adc	r25, r21
 f90:	fc 01       	movw	r30, r24
 f92:	35 96       	adiw	r30, 0x05	; 5
 f94:	80 81       	ld	r24, Z
 f96:	88 23       	and	r24, r24
 f98:	49 f4       	brne	.+18     	; 0xfac <Port_SetPinMode+0x98>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
 f9a:	8c e7       	ldi	r24, 0x7C	; 124
 f9c:	90 e0       	ldi	r25, 0x00	; 0
 f9e:	60 e0       	ldi	r22, 0x00	; 0
 fa0:	44 e0       	ldi	r20, 0x04	; 4
 fa2:	2e e0       	ldi	r18, 0x0E	; 14
 fa4:	0e 94 c8 00 	call	0x190	; 0x190 <Det_ReportError>
				PORT_SET_PIN_MODE_SID,PORT_E_MODE_UNCHANGEABLE);
		error = TRUE;
 fa8:	81 e0       	ldi	r24, 0x01	; 1
 faa:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*MISRA*/
	}
}
 fac:	0f 90       	pop	r0
 fae:	0f 90       	pop	r0
 fb0:	0f 90       	pop	r0
 fb2:	cf 91       	pop	r28
 fb4:	df 91       	pop	r29
 fb6:	08 95       	ret

00000fb8 <main>:
#include "Os.h"

int main(void)
{
 fb8:	df 93       	push	r29
 fba:	cf 93       	push	r28
 fbc:	cd b7       	in	r28, 0x3d	; 61
 fbe:	de b7       	in	r29, 0x3e	; 62
	/* Start the Os */
	Os_start();
 fc0:	0e 94 c9 03 	call	0x792	; 0x792 <Os_start>
 fc4:	80 e0       	ldi	r24, 0x00	; 0
 fc6:	90 e0       	ldi	r25, 0x00	; 0
}
 fc8:	cf 91       	pop	r28
 fca:	df 91       	pop	r29
 fcc:	08 95       	ret

00000fce <_exit>:
 fce:	f8 94       	cli

00000fd0 <__stop_program>:
 fd0:	ff cf       	rjmp	.-2      	; 0xfd0 <__stop_program>
